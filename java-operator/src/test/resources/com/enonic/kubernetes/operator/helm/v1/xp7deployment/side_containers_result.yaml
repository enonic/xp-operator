---
apiVersion: "v1"
kind: "ServiceAccount"
metadata:
  annotations:
    enonic.applyPriority: "20"
  name: "xp-node-sa"
  namespace: "mycloud-mysolution-myenv-myservice"
  ownerReferences:
    - apiVersion: "enonic.cloud/v1"
      kind: "Xp7Deployment"
      blockOwnerDeletion: false
      controller: true
      name: "mycloud-mysolution-myenv-myservice"
---
apiVersion: "v1"
kind: "ServiceAccount"
metadata:
  annotations:
    enonic.applyPriority: "20"
  name: "xp-events-sa"
  namespace: "mycloud-mysolution-myenv-myservice"
  ownerReferences:
    - apiVersion: "enonic.cloud/v1"
      kind: "Xp7Deployment"
      blockOwnerDeletion: false
      controller: true
      name: "mycloud-mysolution-myenv-myservice"
---
apiVersion: "v1"
kind: "Secret"
metadata:
  annotations:
    enonic.applyPriority: "60"
    kubernetes.io/service-account.name: "xp-events-sa"
  name: "xp-events-sa-secret"
  namespace: "mycloud-mysolution-myenv-myservice"
type: "kubernetes.io/service-account-token"
---
apiVersion: "v1"
kind: "Secret"
metadata:
  annotations:
    enonic.applyPriority: "60"
    enonic.neverOverwrite: "true"
  labels:
    cloud: "mycloud"
    enonic.managed: "true"
    environment: "myenv"
    service: "myservice"
    solution: "mysolution"
  name: "su"
  namespace: "mycloud-mysolution-myenv-myservice"
  ownerReferences:
    - apiVersion: "enonic.cloud/v1"
      kind: "Xp7Deployment"
      blockOwnerDeletion: false
      controller: true
      name: "mycloud-mysolution-myenv-myservice"
data:
  pass: "cGFzc3dvcmQ="
  passHash: "YjEwOWYzYmJiYzI0NGViODI0NDE5MTdlZDA2ZDYxOGI5MDA4ZGQwOWIzYmVmZDFiNWUwNzM5NGM3MDZhOGJiOTgwYjFkNzc4NWU1OTc2ZWMwNDliNDZkZjVmMTMyNmFmNWEyZWE2ZDEwM2ZkMDdjOTUzODVmZmFiMGNhY2JjODY="
---
apiVersion: "v1"
kind: "ConfigMap"
metadata:
  annotations:
    enonic.applyPriority: "60"
  labels:
    cloud: "mycloud"
    enonic.managed: "true"
    environment: "myenv"
    service: "myservice"
    solution: "mysolution"
  name: "extra-config"
  namespace: "mycloud-mysolution-myenv-myservice"
  ownerReferences:
    - apiVersion: "enonic.cloud/v1"
      kind: "Xp7Deployment"
      blockOwnerDeletion: false
      controller: true
      name: "mycloud-mysolution-myenv-myservice"
data:
  deployApps.sh: "#!/bin/sh\n\necho \"Bootstrap deploy folder apps\"\n\nDEPLOY_DIR=\"\
    $1\"\n\nadd() {\n    URL=\"$1\"\n    NAME=\"$2\"\n    printf \"Adding %s ... \"\
    \ \"$NAME\"\n    if [ -f \"$DEPLOY_DIR/$NAME\" ]; then\n        echo \"skipped!\
    \ Already exists!\"\n        exit\n    fi\n\n    fail=$(wget --quiet --output-document=\"\
    $DEPLOY_DIR/$NAME\" \"$URL\" 2>&1)\n    if [ $? -ne 0 ]; then\n        rm -f \"\
    $DEPLOY_DIR/$NAME\"\n        echo \"failed!\"\n        echo \"$fail\"\n      \
    \  exit 1\n    fi\n    echo \"success!\"\n}\n\nremove() {\n    NAME=\"$1\"\n \
    \   printf \"Removing %s ... \" \"$NAME\"\n    if [ ! -f \"$DEPLOY_DIR/$NAME\"\
    \ ]; then\n        echo \"skipped! Not found!\"\n        exit\n    fi\n    fail=$(rm\
    \ \"$DEPLOY_DIR/$NAME\" 2>&1) || { echo \"failed! \"; echo \"$fail\"; exit 1;\
    \ }\n    echo \"success!\"\n}\n\n# Delete apps\nfor f in $(find \"$DEPLOY_DIR\"\
    \ -name '*.jar'); do\n  name=$(basename \"$f\")\n  if [ \"$(echo 'snapshotter-c5e507a506.jar'\
    \ | grep \"$name\")\" = \"\" ]; then\n    remove \"$name\"\n  fi\ndone\n\n# Add\
    \ apps\nadd https://repo.enonic.com/public/com/enonic/app/snapshotter/3.0.2/snapshotter-3.0.2.jar\
    \ snapshotter-c5e507a506.jar\n"
  endpoints.sh: "#!/usr/bin/env bash\n\nset -e\n\nusage () {\n    echo \"Usage: $SCRIPT_NAME\
    \ [OPTIONS]\"\n    echo \"Wait until IP has been added to endpoints\"\n    echo\
    \ \"\"\n    echo \"Options:\"\n    echo \"  -s, --service=     Service name\"\n\
    \    echo \"  -i, --ip=          IP address\"\n    echo \"  -t, --timeout=   \
    \  Script timeout\"\n    echo \"  -a, --additional=  Additional seconds to wait\
    \ at end\"\n    echo \"  -r, --reverse      Wait until endpoint is gone\"\n  \
    \  echo \"  -h, --help         Print usage\"\n    exit 1\n}\n\nSERVICE=\"\"\n\
    IP=\"\"\nTIMEOUT=\"20\"\nADDITIONAL_WAIT_SECONDS=\"0\"\nREVERSE=\"0\"\n\nwhile\
    \ [ \"$#\" -gt 0 ]; do\n    case $1 in\n        -h | --help)\n            usage\
    \ ;;\n        -s)\n            shift; SERVICE=\"$1\" ;;\n        --service=*)\n\
    \            SERVICE=$(echo $1 | awk '{split($0,r,\"=\"); print r[2]}') ;;\n \
    \       -i)\n            shift; IP=\"$1\" ;;\n        --ip=*)\n            IP=$(echo\
    \ $1 | awk '{split($0,r,\"=\"); print r[2]}') ;;\n        -t)\n            shift;\
    \ TIMEOUT=\"$1\" ;;\n        --timeout=*)\n            STATE=$(echo $1 | awk '{split($0,r,\"\
    =\"); print r[2]}') ;;\n        -a)\n            shift; ADDITIONAL_WAIT_SECONDS=\"\
    $1\" ;;\n        --additional=*)\n            ADDITIONAL_WAIT_SECONDS=$(echo $1\
    \ | awk '{split($0,r,\"=\"); print r[2]}') ;;\n        -r | --reverse)\n     \
    \       REVERSE=\"1\" ;;\n        *)\n            usage\n            ;;\n    esac\n\
    \    shift\ndone\n\nif [ \"${SERVICE}\" == \"\" ]; then\n    echo \"Missing service\
    \ parameter!\"\n    usage\nfi\n\nif [ \"${IP}\" == \"\" ]; then\n    echo \"Missing\
    \ ip parameter!\"\n    usage\nfi\n\nif [ \"$REVERSE\" = \"0\" ]; then\n    echo\
    \ -n \"Waiting for endpoint ${IP} to appear in service ${SERVICE}: \"\nelse\n\
    \    echo -n \"Waiting for endpoint ${IP} to be removed in service ${SERVICE}:\
    \ \"\nfi\n\necho \"${SERVICE} [timeout: ${TIMEOUT}, additional: ${ADDITIONAL_WAIT_SECONDS}]\"\
    \n\nOK=\"0\"\nFOUND=\"0\"\n\nSTART_TIME=$(date +%s)\nwhile [ \"$OK\" == \"0\"\
    \ ]; do\n    (curl -s -H \"Authorization: Bearer `cat /run/secrets/kubernetes.io/serviceaccount/token`\"\
    \ --cacert /run/secrets/kubernetes.io/serviceaccount/ca.crt https://kubernetes.default.svc.cluster.local/api/v1/namespaces/`cat\
    \ /run/secrets/kubernetes.io/serviceaccount/namespace`/endpoints/${SERVICE} |\
    \ grep ${IP} > /dev/null) && FOUND=\"1\" || true\n\n    if [ \"$FOUND\" == \"\
    1\" ]; then\n        echo \"IP ${IP} in service ${SERVICE} found!\"\n        if\
    \ [ \"${REVERSE}\" == \"0\" ]; then\n            OK=\"1\"\n        fi\n    else\n\
    \        echo \"IP ${IP} in service ${SERVICE} not found!\"\n        if [ \"${REVERSE}\"\
    \ == \"1\" ]; then\n            OK=\"1\"\n        fi\n    fi\n\n    TIME=`printf\
    \ \"%s\\n\" $(( $(date +%s) - ${START_TIME} ))`\n    if [ \"$TIME\" -gt \"$TIMEOUT\"\
    \ ]; then\n        echo \"Operation timed out!\"\n        break\n    fi\n\n  \
    \  if [ \"$OK\" == \"0\" ]; then\n        sleep 2\n    fi\ndone\n\nif [ \"${ADDITIONAL_WAIT_SECONDS}\"\
    \ != \"0\" ]; then\n    echo \"Waiting for additional ${ADDITIONAL_WAIT_SECONDS}\
    \ seconds\"\n    sleep ${ADDITIONAL_WAIT_SECONDS}\nfi\n\nif [ \"${OK}\" != \"\
    1\" ]; then\n    exit 1\nfi"
  events.sh: "#!/usr/bin/env bash\n\nset -e\n\nfunction now() {\n  date --iso-8601=seconds\n\
    }\n\nfunction randomId() {\n  cat /dev/urandom | tr -dc 'a-z0-9' | fold -w 16\
    \ | head -n 1\n}\n\nfunction log() {\n  echo -n \"$(now) $@\"\n}\n\nfunction logWithNL()\
    \ {\n    log \"$@\"\n    echo \"\"\n}\n\nRUNNING=\"true\"\nfunction finish {\n\
    \    logWithNL \"Stopping event loop\"\n    RUNNING=\"false\"\n}\ntrap finish\
    \ EXIT\n\n\nfunction buildEventConfigMapChange() {\n    cat << EOF\n{\n    \"\
    apiVersion\": \"v1\",\n    \"involvedObject\": {\n        \"apiVersion\": \"v1\"\
    ,\n        \"kind\": \"Pod\",\n        \"name\": \"${XP_NODE_NAME}\",\n      \
    \  \"namespace\": \"${NAMESPACE}\",\n        \"fieldPath\": \"spec.containers{exp}\"\
    ,\n        \"uid\": \"${POD_UID}\"\n    },\n    \"kind\": \"Event\",\n    \"lastTimestamp\"\
    : \"$(now)\",\n    \"firstTimestamp\": \"$(now)\",\n    \"message\": \"Pod ${XP_NODE_NAME}\
    \ reloaded ConfigMap ${XP_NODE_GROUP}\",\n    \"metadata\": {\n        \"name\"\
    : \"${XP_NODE_NAME}.$(randomId)\",\n        \"namespace\": \"${NAMESPACE}\"\n\
    \    },\n    \"reason\": \"ConfigReload\",\n    \"related\": {\n        \"apiVersion\"\
    : \"v1\",\n        \"kind\": \"ConfigMap\",\n        \"name\": \"${XP_NODE_GROUP}\"\
    ,\n        \"namespace\": \"${NAMESPACE}\"\n    },\n    \"source\": {\n      \"\
    component\": \"pod/${XP_NODE_NAME}\"\n    },\n    \"type\": \"Normal\"\n}\nEOF\n\
    }\n\nfunction sendEvent() {\n    (cat - | curl -f -s -X POST -H \"Accept: application/json\"\
    \ -H \"Content-Type: application/json\" -H \"Authorization: Bearer $K8S_TOKEN\"\
    \ --cacert /run/secrets/kubernetes.io/serviceaccount/ca.crt -d @- https://kubernetes.default.svc.cluster.local/api/v1/namespaces/`cat\
    \ /run/secrets/kubernetes.io/serviceaccount/namespace`/events > /dev/null || (echo\
    \ \"failed\" && false)) && echo \"success\"\n    #(cat - | kubectl apply -f -\
    \ > /dev/null || (echo \"failed\" && false)) && echo \"success\"\n}\n\n\nfunction\
    \ cmEvent() {\n  log \"Sending ConfigReload event ... \"\n  buildEventConfigMapChange\
    \ | sendEvent\n}\n\nfunction getConfigHash() {\n  find config/ -maxdepth 1 -type\
    \ l | grep -v 'config/\\.\\.' | xargs sha1sum | awk '{print $1}' | xargs echo\n\
    }\n\nOLD_HASHCODE=\"\"\n\nlogWithNL \"Starting event loop\"\n\nwhile [[ \"${RUNNING}\"\
    \ == \"true\" ]]; do\n  NEW_HASHCODE=$(getConfigHash)\n  if [[ \"${NEW_HASHCODE}\"\
    \ != \"${OLD_HASHCODE}\" ]]; then\n    cmEvent\n  fi\n  OLD_HASHCODE=${NEW_HASHCODE}\n\
    \  sleep 2\ndone\n"
  preStop.sh: "#!/usr/bin/env bash\n\necho \"Wait for endpoints to be deleted\"\n\
    bash /enonic-xp/home/extra-config/endpoints.sh -r -s all -i ${XP_NODE_IP} -t 10\n\
    bash /enonic-xp/home/extra-config/endpoints.sh -r -s ${XP_NODE_GROUP} -i ${XP_NODE_IP}\
    \ -t 10 -a 20"
  vhost-defaults.cfg: "enabled = true\n\nmapping.localhost.host = localhost\nmapping.localhost.source\
    \ = /\nmapping.localhost.target = /\nmapping.localhost.idProvider.system = default"
---
apiVersion: "v1"
kind: "ConfigMap"
metadata:
  annotations:
    enonic.applyPriority: "50"
    enonic.neverOverwrite: "true"
  labels:
    cloud: "mycloud"
    enonic.managed: "true"
    enonic.nodeGroup: "fisk"
    environment: "myenv"
    service: "myservice"
    solution: "mysolution"
  name: "fisk"
  namespace: "mycloud-mysolution-myenv-myservice"
  ownerReferences:
    - apiVersion: "enonic.cloud/v1"
      kind: "Xp7Deployment"
      blockOwnerDeletion: false
      controller: true
      name: "mycloud-mysolution-myenv-myservice"
---
apiVersion: "v1"
kind: "PersistentVolumeClaim"
metadata:
  annotations:
    enonic.applyPriority: "10"
  labels:
    cloud: "mycloud"
    enonic.managed: "true"
    environment: "myenv"
    service: "myservice"
    solution: "mysolution"
  name: "blobstore"
  namespace: "mycloud-mysolution-myenv-myservice"
  ownerReferences:
    - apiVersion: "enonic.cloud/v1"
      kind: "Xp7Deployment"
      blockOwnerDeletion: false
      controller: true
      name: "mycloud-mysolution-myenv-myservice"
spec:
  accessModes:
    - "ReadWriteMany"
  resources:
    requests:
      storage: "2Gi"
  storageClassName: "standard"
---
apiVersion: "v1"
kind: "PersistentVolumeClaim"
metadata:
  annotations:
    enonic.applyPriority: "10"
  labels:
    cloud: "mycloud"
    enonic.managed: "true"
    environment: "myenv"
    service: "myservice"
    solution: "mysolution"
  name: "snapshots"
  namespace: "mycloud-mysolution-myenv-myservice"
  ownerReferences:
    - apiVersion: "enonic.cloud/v1"
      kind: "Xp7Deployment"
      blockOwnerDeletion: false
      controller: true
      name: "mycloud-mysolution-myenv-myservice"
spec:
  accessModes:
    - "ReadWriteMany"
  resources:
    requests:
      storage: "3Gi"
  storageClassName: "standard"
---
apiVersion: "rbac.authorization.k8s.io/v1"
kind: "Role"
metadata:
  annotations:
    enonic.applyPriority: "30"
  name: "xp-node-role"
  namespace: "mycloud-mysolution-myenv-myservice"
  ownerReferences:
    - apiVersion: "enonic.cloud/v1"
      kind: "Xp7Deployment"
      blockOwnerDeletion: false
      controller: true
      name: "mycloud-mysolution-myenv-myservice"
rules:
  - apiGroups:
      - "*"
    resources:
      - "endpoints"
      - "pods"
      - "services"
    verbs:
      - "get"
      - "list"
---
apiVersion: "rbac.authorization.k8s.io/v1"
kind: "Role"
metadata:
  annotations:
    enonic.applyPriority: "30"
  name: "cloud-api-role"
  namespace: "mycloud-mysolution-myenv-myservice"
  ownerReferences:
    - apiVersion: "enonic.cloud/v1"
      kind: "Xp7Deployment"
      blockOwnerDeletion: false
      controller: true
      name: "mycloud-mysolution-myenv-myservice"
rules:
  - apiGroups:
      - "*"
    resources:
      - "secrets"
    verbs:
      - "get"
  - apiGroups:
      - "*"
    resources:
      - "configmaps"
    verbs:
      - "get"
      - "update"
---
apiVersion: "rbac.authorization.k8s.io/v1"
kind: "Role"
metadata:
  annotations:
    enonic.applyPriority: "30"
  name: "xp-events-role"
  namespace: "mycloud-mysolution-myenv-myservice"
  ownerReferences:
    - apiVersion: "enonic.cloud/v1"
      kind: "Xp7Deployment"
      blockOwnerDeletion: false
      controller: true
      name: "mycloud-mysolution-myenv-myservice"
rules:
  - apiGroups:
      - "*"
    resources:
      - "events"
    verbs:
      - "create"
---
apiVersion: "rbac.authorization.k8s.io/v1"
kind: "RoleBinding"
metadata:
  annotations:
    enonic.applyPriority: "40"
  name: "xp-node-role-bindings"
  namespace: "mycloud-mysolution-myenv-myservice"
  ownerReferences:
    - apiVersion: "enonic.cloud/v1"
      kind: "Xp7Deployment"
      blockOwnerDeletion: false
      controller: true
      name: "mycloud-mysolution-myenv-myservice"
roleRef:
  kind: "Role"
  apiGroup: "rbac.authorization.k8s.io"
  name: "xp-node-role"
subjects:
  - kind: "ServiceAccount"
    name: "xp-node-sa"
    namespace: "mycloud-mysolution-myenv-myservice"
---
apiVersion: "rbac.authorization.k8s.io/v1"
kind: "RoleBinding"
metadata:
  annotations:
    enonic.applyPriority: "40"
  name: "cloud-api-role-binding"
  namespace: "mycloud-mysolution-myenv-myservice"
  ownerReferences:
    - apiVersion: "enonic.cloud/v1"
      kind: "Xp7Deployment"
      blockOwnerDeletion: false
      controller: true
      name: "mycloud-mysolution-myenv-myservice"
roleRef:
  kind: "Role"
  apiGroup: "rbac.authorization.k8s.io"
  name: "cloud-api-role"
subjects:
  - kind: "ServiceAccount"
    name: "cloudApi"
    namespace: "ec-system"
---
apiVersion: "rbac.authorization.k8s.io/v1"
kind: "RoleBinding"
metadata:
  annotations:
    enonic.applyPriority: "40"
  name: "xp-events-role-bindings"
  namespace: "mycloud-mysolution-myenv-myservice"
  ownerReferences:
    - apiVersion: "enonic.cloud/v1"
      kind: "Xp7Deployment"
      blockOwnerDeletion: false
      controller: true
      name: "mycloud-mysolution-myenv-myservice"
roleRef:
  kind: "Role"
  apiGroup: "rbac.authorization.k8s.io"
  name: "xp-events-role"
subjects:
  - kind: "ServiceAccount"
    name: "xp-events-sa"
    namespace: "mycloud-mysolution-myenv-myservice"
---
apiVersion: "v1"
kind: "Service"
metadata:
  annotations:
    enonic.applyPriority: "100"
  labels:
    cloud: "mycloud"
    enonic.managed: "true"
    environment: "myenv"
    service: "myservice"
    solution: "mysolution"
  name: "cluster-discovery"
  namespace: "mycloud-mysolution-myenv-myservice"
  ownerReferences:
    - apiVersion: "enonic.cloud/v1"
      kind: "Xp7Deployment"
      blockOwnerDeletion: false
      controller: true
      name: "mycloud-mysolution-myenv-myservice"
spec:
  clusterIP: "None"
  ports:
    - name: "hazelcast"
      port: 5701
      protocol: "TCP"
      targetPort: 5701
    - name: "es"
      port: 9300
      protocol: "TCP"
      targetPort: 9300
  publishNotReadyAddresses: true
  selector:
    enonic.deployment: "mycloud-mysolution-myenv-myservice"
  sessionAffinity: "None"
  type: "ClusterIP"
---
apiVersion: "v1"
kind: "Service"
metadata:
  annotations:
    enonic.applyPriority: "100"
  labels:
    cloud: "mycloud"
    enonic.managed: "true"
    environment: "myenv"
    service: "myservice"
    solution: "mysolution"
  name: "all"
  namespace: "mycloud-mysolution-myenv-myservice"
  ownerReferences:
    - apiVersion: "enonic.cloud/v1"
      kind: "Xp7Deployment"
      blockOwnerDeletion: false
      controller: true
      name: "mycloud-mysolution-myenv-myservice"
spec:
  clusterIP: "None"
  ports:
    - name: "xp-metrics"
      port: 2609
      protocol: "TCP"
      targetPort: 2609
    - name: "xp-management"
      port: 4848
      protocol: "TCP"
      targetPort: 4848
    - name: "xp-main"
      port: 8080
      protocol: "TCP"
      targetPort: 8080
    - name: "es-api"
      port: 9200
      protocol: "TCP"
      targetPort: 9200
  selector:
    enonic.deployment: "mycloud-mysolution-myenv-myservice"
  sessionAffinity: "None"
  type: "ClusterIP"
---
apiVersion: "v1"
kind: "Service"
metadata:
  annotations:
    enonic.applyPriority: "100"
  labels:
    cloud: "mycloud"
    enonic.managed: "true"
    enonic.nodeGroup: "fisk"
    environment: "myenv"
    service: "myservice"
    solution: "mysolution"
  name: "fisk"
  namespace: "mycloud-mysolution-myenv-myservice"
  ownerReferences:
    - apiVersion: "enonic.cloud/v1"
      kind: "Xp7Deployment"
      blockOwnerDeletion: false
      controller: true
      name: "mycloud-mysolution-myenv-myservice"
spec:
  clusterIP: "None"
  ports:
    - name: "xp-metrics"
      port: 2609
      protocol: "TCP"
      targetPort: 2609
    - name: "xp-management"
      port: 4848
      protocol: "TCP"
      targetPort: 4848
    - name: "xp-main"
      port: 8080
      protocol: "TCP"
      targetPort: 8080
    - name: "es-api"
      port: 9200
      protocol: "TCP"
      targetPort: 9200
  selector:
    enonic.deployment: "mycloud-mysolution-myenv-myservice"
    enonic.nodeGroup: "fisk"
  sessionAffinity: "None"
  type: "ClusterIP"
---
apiVersion: "apps/v1"
kind: "StatefulSet"
metadata:
  annotations:
    enonic.applyPriority: "90"
  labels:
    cloud: "mycloud"
    enonic.managed: "true"
    enonic.nodeGroup: "fisk"
    environment: "myenv"
    service: "myservice"
    solution: "mysolution"
  name: "fisk"
  namespace: "mycloud-mysolution-myenv-myservice"
  ownerReferences:
    - apiVersion: "enonic.cloud/v1"
      kind: "Xp7Deployment"
      blockOwnerDeletion: false
      controller: true
      name: "mycloud-mysolution-myenv-myservice"
spec:
  podManagementPolicy: "Parallel"
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      cloud: "mycloud"
      enonic.deployment: "mycloud-mysolution-myenv-myservice"
      enonic.managed: "true"
      enonic.nodeGroup: "fisk"
      environment: "myenv"
      service: "myservice"
      solution: "mysolution"
  serviceName: "cluster-discovery"
  template:
    metadata:
      annotations:
        enonic.cloud/logs.xp7: "true"
        enonic.cloud/metrics.xp7: "true"
      labels:
        cloud: "mycloud"
        enonic.data: "true"
        enonic.deployment: "mycloud-mysolution-myenv-myservice"
        enonic.managed: "true"
        enonic.master: "true"
        enonic.nodeGroup: "fisk"
        environment: "myenv"
        service: "myservice"
        solution: "mysolution"
    spec:
      containers:
        - env:
            - name: "NAMESPACE"
              valueFrom:
                fieldRef:
                  apiVersion: "v1"
                  fieldPath: "metadata.namespace"
            - name: "XP_NODE_NAME"
              valueFrom:
                fieldRef:
                  apiVersion: "v1"
                  fieldPath: "metadata.name"
            - name: "XP_NODE_GROUP"
              value: "fisk"
            - name: "XP_CLUSTERED"
              value: "false"
            - name: "XP_HZ_MIN_SIZE"
            - name: "XP_ES_MIN_MASTERS"
            - name: "XP_ES_MIN_DATAS"
            - name: "XP_IS_MASTER"
              value: "true"
            - name: "XP_IS_DATA"
              value: "true"
            - name: "XP_NODE_IP"
              valueFrom:
                fieldRef:
                  apiVersion: "v1"
                  fieldPath: "status.podIP"
            - name: "SU_PASS_HASH"
              valueFrom:
                secretKeyRef:
                  key: "passHash"
                  name: "su"
                  optional: false
            - name: "PRE_APP_HASH"
              value: "957ee10a49f2be0d0e2b1272ef611a5a93fe59c95c4044d792118aec0221021e6eb3685822a057b80343f8bcd14d7c37140eb2967042a1486bdedc5456f3fde4"
            - name: "XP_OPTS"
              value: "-Xms154m -Xmx154m -XX:-HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=/enonic-xp/home/data/oom.hprof\
            \ -Dhazelcast.shutdownhook.policy=GRACEFUL -Dhazelcast.graceful.shutdown.max.wait=600"
          image: "enonic/xp:7.13.0-ubuntu"
          imagePullPolicy: "IfNotPresent"
          livenessProbe:
            failureThreshold: 10
            httpGet:
              path: "/health"
              port: 2609
              scheme: "HTTP"
            timeoutSeconds: 2
          name: "exp"
          ports:
            - containerPort: 2609
              name: "xp-stats"
              protocol: "TCP"
            - containerPort: 8080
              name: "xp-main"
              protocol: "TCP"
            - containerPort: 9200
              name: "es-http"
              protocol: "TCP"
            - containerPort: 9300
              name: "es-transport"
              protocol: "TCP"
          readinessProbe:
            failureThreshold: 2
            httpGet:
              path: "/ready"
              port: 2609
              scheme: "HTTP"
            timeoutSeconds: 2
          resources:
            limits:
              cpu: "1"
              memory: "512Mi"
            requests:
              cpu: "1"
              memory: "512Mi"
          securityContext:
            capabilities:
              drop:
                - "ALL"
            runAsNonRoot: true
            runAsUser: 1337
          startupProbe:
            failureThreshold: 20
            httpGet:
              path: "/health"
              port: 2609
              scheme: "HTTP"
            initialDelaySeconds: 30
            periodSeconds: 5
            timeoutSeconds: 2
          terminationMessagePath: "/dev/termination-log"
          terminationMessagePolicy: "File"
          volumeMounts:
            - mountPath: "/enonic-xp/home/config"
              name: "config"
            - mountPath: "/enonic-xp/home/extra-config"
              name: "extra-config"
            - mountPath: "/enonic-xp/home/deploy"
              name: "deploy"
            - mountPath: "/enonic-xp/home/data"
              name: "export"
            - mountPath: "/enonic-xp/home/repo/index"
              name: "index"
            - mountPath: "/enonic-xp/home/work"
              name: "work"
            - mountPath: "/enonic-xp/home/repo/blob"
              name: "blobstore"
            - mountPath: "/enonic-xp/home/snapshots"
              name: "snapshots"
        - args:
            - "extra-config/events.sh"
          command:
            - "bash"
          env:
            - name: "NAMESPACE"
              valueFrom:
                fieldRef:
                  apiVersion: "v1"
                  fieldPath: "metadata.namespace"
            - name: "POD_UID"
              valueFrom:
                fieldRef:
                  apiVersion: "v1"
                  fieldPath: "metadata.uid"
            - name: "XP_NODE_NAME"
              valueFrom:
                fieldRef:
                  apiVersion: "v1"
                  fieldPath: "metadata.name"
            - name: "XP_NODE_GROUP"
              value: "fisk"
            - name: "K8S_TOKEN"
              valueFrom:
                secretKeyRef:
                  key: "token"
                  name: "xp-events-sa-secret"
          image: "enonic/xp:7.13.0-ubuntu"
          imagePullPolicy: "IfNotPresent"
          name: "events"
          securityContext:
            capabilities:
              drop:
                - "ALL"
            runAsNonRoot: true
            runAsUser: 1337
          terminationMessagePath: "/dev/termination-log"
          terminationMessagePolicy: "File"
          volumeMounts:
            - mountPath: "/enonic-xp/home/config"
              name: "config"
            - mountPath: "/enonic-xp/home/extra-config"
              name: "extra-config"
        - image: "otherbox"
          imagePullPolicy: "IfNotPresent"
          name: "my-sidecar-2"
          securityContext:
            capabilities:
              drop:
                - "ALL"
            runAsNonRoot: true
            runAsUser: 1337
          terminationMessagePath: "/dev/termination-log"
          terminationMessagePolicy: "File"
          volumeMounts:
            - mountPath: "/deploy"
              name: "deploy"
      dnsPolicy: "ClusterFirst"
      initContainers:
        - command:
            - "sysctl"
            - "-w"
            - "vm.max_map_count=262144"
          image: "busybox"
          imagePullPolicy: "IfNotPresent"
          name: "configure-sysctl"
          resources: {}
          securityContext:
            privileged: true
            runAsUser: 0
          terminationMessagePath: "/dev/termination-log"
          terminationMessagePolicy: "File"
        - command:
            - "sh"
            - "/extra-config/deployApps.sh"
            - "/deploy"
          image: "busybox"
          imagePullPolicy: "IfNotPresent"
          name: "deploy-preinstalled-apps"
          volumeMounts:
            - mountPath: "/extra-config"
              name: "extra-config"
            - mountPath: "/deploy"
              name: "deploy"
        - args:
            - "-c"
            - "cp -r /export/* /deploy"
          command:
            - "/bin/sh"
          image: "busybox"
          imagePullPolicy: "IfNotPresent"
          name: "my-sidecar-1"
          securityContext:
            capabilities:
              drop:
                - "ALL"
            runAsNonRoot: true
            runAsUser: 1337
          terminationMessagePath: "/dev/termination-log"
          terminationMessagePolicy: "File"
          volumeMounts:
            - mountPath: "/deploy"
              name: "deploy"
      restartPolicy: "Always"
      schedulerName: "default-scheduler"
      securityContext:
        fsGroup: 0
      serviceAccount: "xp-node-sa"
      serviceAccountName: "xp-node-sa"
      terminationGracePeriodSeconds: 600
      volumes:
        - configMap:
            defaultMode: 420
            name: "fisk"
          name: "config"
        - configMap:
            defaultMode: 420
            name: "extra-config"
          name: "extra-config"
        - emptyDir:
            sizeLimit: "100Mi"
          name: "deploy"
        - name: "blobstore"
          persistentVolumeClaim:
            claimName: "blobstore"
        - name: "snapshots"
          persistentVolumeClaim:
            claimName: "snapshots"
  updateStrategy:
    type: "RollingUpdate"
  volumeClaimTemplates:
    - apiVersion: "v1"
      kind: "PersistentVolumeClaim"
      metadata:
        labels:
          cloud: "mycloud"
          enonic.managed: "true"
          enonic.nodeGroup: "fisk"
          environment: "myenv"
          service: "myservice"
          solution: "mysolution"
        name: "export"
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "234Mi"
        storageClassName: "standard"
        volumeMode: "Filesystem"
    - apiVersion: "v1"
      kind: "PersistentVolumeClaim"
      metadata:
        labels:
          cloud: "mycloud"
          enonic.managed: "true"
          enonic.nodeGroup: "fisk"
          environment: "myenv"
          service: "myservice"
          solution: "mysolution"
        name: "index"
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "200Mi"
        storageClassName: "standard"
        volumeMode: "Filesystem"
    - apiVersion: "v1"
      kind: "PersistentVolumeClaim"
      metadata:
        labels:
          cloud: "mycloud"
          enonic.managed: "true"
          enonic.nodeGroup: "fisk"
          environment: "myenv"
          service: "myservice"
          solution: "mysolution"
        name: "work"
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "400Mi"
        storageClassName: "standard"
        volumeMode: "Filesystem"
---
apiVersion: "enonic.cloud/v1"
kind: "Xp7Config"
metadata:
  annotations:
    enonic.applyPriority: "70"
    enonic.neverOverwrite: "true"
  labels:
    cloud: "mycloud"
    enonic.managed: "true"
    environment: "myenv"
    service: "myservice"
    solution: "mysolution"
  name: "all-system"
  namespace: "mycloud-mysolution-myenv-myservice"
  ownerReferences:
    - apiVersion: "enonic.cloud/v1"
      kind: "Xp7Deployment"
      blockOwnerDeletion: false
      controller: true
      name: "mycloud-mysolution-myenv-myservice"
spec:
  nodeGroup: "all"
  file: "system.properties"
  data: "xp.name = mycloud-mysolution-myenv-myservice\nxp.suPassword = {sha512}${env.SU_PASS_HASH}\n\
    xp.init.adminUserCreation = false"
  dataBase64: false
---
apiVersion: "enonic.cloud/v1"
kind: "Xp7Config"
metadata:
  annotations:
    enonic.applyPriority: "70"
    enonic.neverOverwrite: "true"
  labels:
    cloud: "mycloud"
    enonic.managed: "true"
    environment: "myenv"
    service: "myservice"
    solution: "mysolution"
  name: "all-admin"
  namespace: "mycloud-mysolution-myenv-myservice"
  ownerReferences:
    - apiVersion: "enonic.cloud/v1"
      kind: "Xp7Deployment"
      blockOwnerDeletion: false
      controller: true
      name: "mycloud-mysolution-myenv-myservice"
spec:
  nodeGroup: "all"
  file: "com.enonic.xp.app.main.cfg"
  data: "tourDisabled = true"
  dataBase64: false
---
apiVersion: "enonic.cloud/v1"
kind: "Xp7Config"
metadata:
  annotations:
    enonic.applyPriority: "70"
  labels:
    cloud: "mycloud"
    enonic.managed: "true"
    environment: "myenv"
    service: "myservice"
    solution: "mysolution"
  name: "all-cluster"
  namespace: "mycloud-mysolution-myenv-myservice"
  ownerReferences:
    - apiVersion: "enonic.cloud/v1"
      kind: "Xp7Deployment"
      blockOwnerDeletion: false
      controller: true
      name: "mycloud-mysolution-myenv-myservice"
spec:
  nodeGroup: "all"
  file: "com.enonic.xp.cluster.cfg"
  data: "network.host=0.0.0.0\nnetwork.publish.host=${env.XP_NODE_IP}\nnode.name=${env.XP_NODE_NAME}\n\
    cluster.enabled=false"
  dataBase64: false
---
apiVersion: "enonic.cloud/v1"
kind: "Xp7Config"
metadata:
  annotations:
    enonic.applyPriority: "70"
    enonic.neverOverwrite: "true"
  labels:
    cloud: "mycloud"
    enonic.managed: "true"
    environment: "myenv"
    service: "myservice"
    solution: "mysolution"
  name: "all-logback"
  namespace: "mycloud-mysolution-myenv-myservice"
  ownerReferences:
    - apiVersion: "enonic.cloud/v1"
      kind: "Xp7Deployment"
      blockOwnerDeletion: false
      controller: true
      name: "mycloud-mysolution-myenv-myservice"
spec:
  nodeGroup: "all"
  file: "logback.xml"
  data: "<?xml version=\"1.0\"?>\n<configuration scan=\"true\" scanPeriod=\"60 seconds\"\
    >\n\n  <appender name=\"FILE\" class=\"ch.qos.logback.core.rolling.RollingFileAppender\"\
    >\n    <file>${xp.home}/logs/server.log</file>\n    <rollingPolicy class=\"ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy\"\
    >\n      <fileNamePattern>${xp.home}/logs/server.%d{yyyy-MM-dd}.%i.log</fileNamePattern>\n\
    \      <maxFileSize>100MB</maxFileSize>\n      <maxHistory>7</maxHistory>\n  \
    \    <totalSizeCap>3GB</totalSizeCap>\n    </rollingPolicy>\n    <encoder>\n \
    \     <pattern>%date{ISO8601} %-5level %logger{36} - %msg%n</pattern>\n    </encoder>\n\
    \  </appender>\n\n  <appender name=\"STDOUT\" class=\"ch.qos.logback.core.ConsoleAppender\"\
    >\n    <withJansi>true</withJansi>\n    <encoder>\n      <pattern>%date{ISO8601}\
    \ %-5level %logger{36} - %msg%n</pattern>\n    </encoder>\n  </appender>\n\n \
    \ <root level=\"info\">\n    <appender-ref ref=\"STDOUT\"/>\n    <appender-ref\
    \ ref=\"FILE\"/>\n  </root>\n\n  <logger name=\"Events.Service\" level=\"WARN\"\
    \ additivity=\"false\">\n    <appender-ref ref=\"STDOUT\"/>\n    <appender-ref\
    \ ref=\"FILE\"/>\n  </logger>\n\n  <logger name=\"Events.Bundle\" level=\"WARN\"\
    \ additivity=\"false\">\n    <appender-ref ref=\"STDOUT\"/>\n    <appender-ref\
    \ ref=\"FILE\"/>\n  </logger>\n\n</configuration>"
  dataBase64: false
---
apiVersion: "enonic.cloud/v1"
kind: "Xp7Config"
metadata:
  annotations:
    enonic.applyPriority: "71"
    enonic.neverOverwrite: "true"
  labels:
    cloud: "mycloud"
    enonic.managed: "true"
    environment: "myenv"
    service: "myservice"
    solution: "mysolution"
  name: "fisk-vhosts"
  namespace: "mycloud-mysolution-myenv-myservice"
  ownerReferences:
    - apiVersion: "enonic.cloud/v1"
      kind: "Xp7Deployment"
      blockOwnerDeletion: false
      controller: true
      name: "mycloud-mysolution-myenv-myservice"
spec:
  nodeGroup: "fisk"
  file: "com.enonic.xp.web.vhost.cfg"
  data: "enabled = true"
  dataBase64: false
---
apiVersion: "enonic.cloud/v1"
kind: "Xp7Config"
metadata:
  annotations:
    enonic.applyPriority: "71"
  labels:
    cloud: "mycloud"
    enonic.managed: "true"
    environment: "myenv"
    service: "myservice"
    solution: "mysolution"
  name: "fisk-elasticsearch"
  namespace: "mycloud-mysolution-myenv-myservice"
  ownerReferences:
    - apiVersion: "enonic.cloud/v1"
      kind: "Xp7Deployment"
      blockOwnerDeletion: false
      controller: true
      name: "mycloud-mysolution-myenv-myservice"
spec:
  nodeGroup: "fisk"
  file: "com.enonic.xp.elasticsearch.cfg"
  data: "http.enabled=true\ncluster.name=mycloud-mysolution-myenv-myservice\nindex.auto_expand_replicas=0-all"
  dataBase64: false
