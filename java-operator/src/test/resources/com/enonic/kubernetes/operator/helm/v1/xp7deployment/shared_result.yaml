---
apiVersion: "v1"
kind: "ServiceAccount"
metadata:
  annotations:
    enonic.applyPriority: "20"
  name: "xp-node-sa"
  namespace: "mycloud-mysolution-myenv-myservice"
  ownerReferences:
    - apiVersion: "enonic.cloud/v1"
      kind: "Xp7Deployment"
      blockOwnerDeletion: false
      controller: true
      name: "mycloud-mysolution-myenv-myservice"
---
apiVersion: "v1"
kind: "ServiceAccount"
metadata:
  annotations:
    enonic.applyPriority: "20"
  name: "xp-events-sa"
  namespace: "mycloud-mysolution-myenv-myservice"
  ownerReferences:
    - apiVersion: "enonic.cloud/v1"
      kind: "Xp7Deployment"
      blockOwnerDeletion: false
      controller: true
      name: "mycloud-mysolution-myenv-myservice"
---
apiVersion: "v1"
kind: "Secret"
metadata:
  annotations:
    enonic.applyPriority: "60"
    kubernetes.io/service-account.name: "xp-events-sa"
  name: "xp-events-sa-secret"
  namespace: "mycloud-mysolution-myenv-myservice"
type: "kubernetes.io/service-account-token"
---
apiVersion: "v1"
kind: "Secret"
metadata:
  annotations:
    enonic.applyPriority: "60"
    enonic.neverOverwrite: "true"
  labels:
    cloud: "mycloud"
    enonic.managed: "true"
    environment: "myenv"
    service: "myservice"
    solution: "mysolution"
  name: "su"
  namespace: "mycloud-mysolution-myenv-myservice"
  ownerReferences:
    - apiVersion: "enonic.cloud/v1"
      kind: "Xp7Deployment"
      blockOwnerDeletion: false
      controller: true
      name: "mycloud-mysolution-myenv-myservice"
data:
  pass: "cGFzc3dvcmQ="
  passHash: "YjEwOWYzYmJiYzI0NGViODI0NDE5MTdlZDA2ZDYxOGI5MDA4ZGQwOWIzYmVmZDFiNWUwNzM5NGM3MDZhOGJiOTgwYjFkNzc4NWU1OTc2ZWMwNDliNDZkZjVmMTMyNmFmNWEyZWE2ZDEwM2ZkMDdjOTUzODVmZmFiMGNhY2JjODY="
---
apiVersion: "v1"
kind: "ConfigMap"
metadata:
  annotations:
    enonic.applyPriority: "60"
  labels:
    cloud: "mycloud"
    enonic.managed: "true"
    environment: "myenv"
    service: "myservice"
    solution: "mysolution"
  name: "extra-config"
  namespace: "mycloud-mysolution-myenv-myservice"
  ownerReferences:
    - apiVersion: "enonic.cloud/v1"
      kind: "Xp7Deployment"
      blockOwnerDeletion: false
      controller: true
      name: "mycloud-mysolution-myenv-myservice"
data:
  endpoints.sh: "#!/usr/bin/env bash\n\nset -e\n\nusage () {\n    echo \"Usage: $SCRIPT_NAME\
    \ [OPTIONS]\"\n    echo \"Wait until IP has been added to endpoints\"\n    echo\
    \ \"\"\n    echo \"Options:\"\n    echo \"  -s, --service=     Service name\"\n\
    \    echo \"  -i, --ip=          IP address\"\n    echo \"  -t, --timeout=   \
    \  Script timeout\"\n    echo \"  -a, --additional=  Additional seconds to wait\
    \ at end\"\n    echo \"  -r, --reverse      Wait until endpoint is gone\"\n  \
    \  echo \"  -h, --help         Print usage\"\n    exit 1\n}\n\nSERVICE=\"\"\n\
    IP=\"\"\nTIMEOUT=\"20\"\nADDITIONAL_WAIT_SECONDS=\"0\"\nREVERSE=\"0\"\n\nwhile\
    \ [ \"$#\" -gt 0 ]; do\n    case $1 in\n        -h | --help)\n            usage\
    \ ;;\n        -s)\n            shift; SERVICE=\"$1\" ;;\n        --service=*)\n\
    \            SERVICE=$(echo $1 | awk '{split($0,r,\"=\"); print r[2]}') ;;\n \
    \       -i)\n            shift; IP=\"$1\" ;;\n        --ip=*)\n            IP=$(echo\
    \ $1 | awk '{split($0,r,\"=\"); print r[2]}') ;;\n        -t)\n            shift;\
    \ TIMEOUT=\"$1\" ;;\n        --timeout=*)\n            STATE=$(echo $1 | awk '{split($0,r,\"\
    =\"); print r[2]}') ;;\n        -a)\n            shift; ADDITIONAL_WAIT_SECONDS=\"\
    $1\" ;;\n        --additional=*)\n            ADDITIONAL_WAIT_SECONDS=$(echo $1\
    \ | awk '{split($0,r,\"=\"); print r[2]}') ;;\n        -r | --reverse)\n     \
    \       REVERSE=\"1\" ;;\n        *)\n            usage\n            ;;\n    esac\n\
    \    shift\ndone\n\nif [ \"${SERVICE}\" == \"\" ]; then\n    echo \"Missing service\
    \ parameter!\"\n    usage\nfi\n\nif [ \"${IP}\" == \"\" ]; then\n    echo \"Missing\
    \ ip parameter!\"\n    usage\nfi\n\nif [ \"$REVERSE\" = \"0\" ]; then\n    echo\
    \ -n \"Waiting for endpoint ${IP} to appear in service ${SERVICE}: \"\nelse\n\
    \    echo -n \"Waiting for endpoint ${IP} to be removed in service ${SERVICE}:\
    \ \"\nfi\n\necho \"${SERVICE} [timeout: ${TIMEOUT}, additional: ${ADDITIONAL_WAIT_SECONDS}]\"\
    \n\nOK=\"0\"\nFOUND=\"0\"\n\nSTART_TIME=$(date +%s)\nwhile [ \"$OK\" == \"0\"\
    \ ]; do\n    (curl -s -H \"Authorization: Bearer `cat /var/run/secrets/kubernetes.io/serviceaccount/token`\"\
    \ --cacert /var/run/secrets/kubernetes.io/serviceaccount/ca.crt https://kubernetes.default.svc.cluster.local/api/v1/namespaces/`cat\
    \ /var/run/secrets/kubernetes.io/serviceaccount/namespace`/endpoints/${SERVICE} |\
    \ grep ${IP} > /dev/null) && FOUND=\"1\" || true\n\n    if [ \"$FOUND\" == \"\
    1\" ]; then\n        echo \"IP ${IP} in service ${SERVICE} found!\"\n        if\
    \ [ \"${REVERSE}\" == \"0\" ]; then\n            OK=\"1\"\n        fi\n    else\n\
    \        echo \"IP ${IP} in service ${SERVICE} not found!\"\n        if [ \"${REVERSE}\"\
    \ == \"1\" ]; then\n            OK=\"1\"\n        fi\n    fi\n\n    TIME=`printf\
    \ \"%s\\n\" $(( $(date +%s) - ${START_TIME} ))`\n    if [ \"$TIME\" -gt \"$TIMEOUT\"\
    \ ]; then\n        echo \"Operation timed out!\"\n        break\n    fi\n\n  \
    \  if [ \"$OK\" == \"0\" ]; then\n        sleep 2\n    fi\ndone\n\nif [ \"${ADDITIONAL_WAIT_SECONDS}\"\
    \ != \"0\" ]; then\n    echo \"Waiting for additional ${ADDITIONAL_WAIT_SECONDS}\
    \ seconds\"\n    sleep ${ADDITIONAL_WAIT_SECONDS}\nfi\n\nif [ \"${OK}\" != \"\
    1\" ]; then\n    exit 1\nfi\n"
  pod-annotator.sh: "#!/bin/sh\nset -e\n\nNAMESPACE=\"$(cat /var/run/secrets/kubernetes.io/serviceaccount/namespace)\"\
    \nPOD_NAME=\"$(hostname)\"\nAPI=\"https://kubernetes.default.svc/api/v1/namespaces/${NAMESPACE}/pods/${POD_NAME}\"\
    \n\nnow() {\n  date -u +\"%Y-%m-%dT%H:%M:%SZ\"\n}\n\nhash_config() {\n  find \"\
    ${CONFIG_PATH}\" -maxdepth 1 -type l 2>/dev/null \\\n    | grep -v \"${CONFIG_PATH}/\\\
    .\\.\" \\\n    | xargs sha1sum 2>/dev/null \\\n    | awk '{print $1}' \\\n   \
    \ | xargs echo\n}\n\npatch_annotation() {\n  TIMESTAMP=\"$(now)\"\n  log \"Detected\
    \ config change, setting ${POD_CONFIG_RELOADED_ANNOTATION} = ${TIMESTAMP}\"\n\n\
    \  RESPONSE=$(curl -s -w \"\\n%{http_code}\" -X PATCH \"${API}\" \\\n    -H \"\
    Authorization: Bearer $K8S_TOKEN\" \\\n    -H \"Content-Type: application/merge-patch+json\"\
    \ \\\n    --cacert /var/run/secrets/kubernetes.io/serviceaccount/ca.crt \\\n \
    \   -d \"{\\\"metadata\\\": {\\\"annotations\\\": {\\\"${POD_CONFIG_RELOADED_ANNOTATION}\\\
    \": \\\"${TIMESTAMP}\\\"}}}\")\n\n  BODY=$(echo \"$RESPONSE\" | head -n -1)\n\
    \  CODE=$(echo \"$RESPONSE\" | tail -n1)\n\n  if [ \"$CODE\" -ge 200 ] && [ \"\
    $CODE\" -lt 300 ]; then\n    log \"Successfully patched pod annotation\"\n  else\n\
    \    log \"Failed to patch pod. HTTP $CODE. Response body:\"\n    echo \"$BODY\"\
    \n  fi\n}\n\nlog() {\n  echo \"$(now) $@\"\n}\n\n# Handle graceful shutdown\n\
    trap 'log \"Received termination signal, exiting.\"; exit 0' TERM INT\n\nLAST_HASH=\"\
    \"\n\nlog \"Starting config reload watcher\"\nlog \"Watching: ${CONFIG_PATH},\
    \ annotating: ${POD_CONFIG_RELOADED_ANNOTATION}\"\n\nwhile true; do\n  CURRENT_HASH=\"\
    $(hash_config)\"\n  if [ \"$CURRENT_HASH\" != \"$LAST_HASH\" ]; then\n    LAST_HASH=\"\
    $CURRENT_HASH\"\n    patch_annotation\n  fi\n  sleep 2\ndone\n"
  preStop.sh: "#!/usr/bin/env bash\n\necho \"Wait for endpoints to be deleted\"\n\
    bash /enonic-xp/home/extra-config/endpoints.sh -r -s all -i ${XP_NODE_IP} -t 10\n\
    bash /enonic-xp/home/extra-config/endpoints.sh -r -s ${XP_NODE_GROUP} -i ${XP_NODE_IP}\
    \ -t 10 -a 20"
  vhost-defaults.cfg: "enabled = true\n\nmapping.localhost.host = localhost\nmapping.localhost.source\
    \ = /\nmapping.localhost.target = /\nmapping.localhost.idProvider.system = default"
---
apiVersion: "v1"
kind: "ConfigMap"
metadata:
  annotations:
    enonic.applyPriority: "50"
    enonic.neverOverwrite: "true"
  labels:
    cloud: "mycloud"
    enonic.managed: "true"
    enonic.nodeGroup: "master"
    environment: "myenv"
    service: "myservice"
    solution: "mysolution"
  name: "master"
  namespace: "mycloud-mysolution-myenv-myservice"
  ownerReferences:
    - apiVersion: "enonic.cloud/v1"
      kind: "Xp7Deployment"
      blockOwnerDeletion: false
      controller: true
      name: "mycloud-mysolution-myenv-myservice"
---
apiVersion: "v1"
kind: "ConfigMap"
metadata:
  annotations:
    enonic.applyPriority: "50"
    enonic.neverOverwrite: "true"
  labels:
    cloud: "mycloud"
    enonic.managed: "true"
    enonic.nodeGroup: "data"
    environment: "myenv"
    service: "myservice"
    solution: "mysolution"
  name: "data"
  namespace: "mycloud-mysolution-myenv-myservice"
  ownerReferences:
    - apiVersion: "enonic.cloud/v1"
      kind: "Xp7Deployment"
      blockOwnerDeletion: false
      controller: true
      name: "mycloud-mysolution-myenv-myservice"
---
apiVersion: "v1"
kind: "ConfigMap"
metadata:
  annotations:
    enonic.applyPriority: "50"
    enonic.neverOverwrite: "true"
  labels:
    cloud: "mycloud"
    enonic.managed: "true"
    enonic.nodeGroup: "frontend"
    environment: "myenv"
    service: "myservice"
    solution: "mysolution"
  name: "frontend"
  namespace: "mycloud-mysolution-myenv-myservice"
  ownerReferences:
    - apiVersion: "enonic.cloud/v1"
      kind: "Xp7Deployment"
      blockOwnerDeletion: false
      controller: true
      name: "mycloud-mysolution-myenv-myservice"
---
apiVersion: "v1"
kind: "PersistentVolumeClaim"
metadata:
  annotations:
    enonic.applyPriority: "10"
  labels:
    cloud: "mycloud"
    enonic.managed: "true"
    environment: "myenv"
    service: "myservice"
    solution: "mysolution"
  name: "export"
  namespace: "mycloud-mysolution-myenv-myservice"
  ownerReferences:
    - apiVersion: "enonic.cloud/v1"
      kind: "Xp7Deployment"
      blockOwnerDeletion: false
      controller: true
      name: "mycloud-mysolution-myenv-myservice"
spec:
  accessModes:
    - "ReadWriteMany"
  resources:
    requests:
      storage: "2Gi"
  storageClassName: "standard"
---
apiVersion: "v1"
kind: "PersistentVolumeClaim"
metadata:
  annotations:
    enonic.applyPriority: "10"
  labels:
    cloud: "mycloud"
    enonic.managed: "true"
    environment: "myenv"
    service: "myservice"
    solution: "mysolution"
  name: "shared"
  namespace: "mycloud-mysolution-myenv-myservice"
  ownerReferences:
    - apiVersion: "enonic.cloud/v1"
      kind: "Xp7Deployment"
      blockOwnerDeletion: false
      controller: true
      name: "mycloud-mysolution-myenv-myservice"
spec:
  accessModes:
    - "ReadWriteMany"
  resources:
    requests:
      storage: "1Gi"
  storageClassName: "sharedClass"
---
apiVersion: "rbac.authorization.k8s.io/v1"
kind: "ClusterRole"
metadata:
  annotations:
    enonic.applyPriority: "30"
  name: "mycloud-mysolution-myenv-myservice-hazelcast"
  ownerReferences:
    - apiVersion: "enonic.cloud/v1"
      kind: "Xp7Deployment"
      blockOwnerDeletion: false
      controller: true
      name: "mycloud-mysolution-myenv-myservice"
rules:
  - apiGroups:
      - "*"
    resources:
      - "nodes"
    verbs:
      - "get"
---
apiVersion: "rbac.authorization.k8s.io/v1"
kind: "ClusterRoleBinding"
metadata:
  annotations:
    enonic.applyPriority: "40"
  name: "mycloud-mysolution-myenv-myservice-hazelcast"
  ownerReferences:
    - apiVersion: "enonic.cloud/v1"
      kind: "Xp7Deployment"
      blockOwnerDeletion: false
      controller: true
      name: "mycloud-mysolution-myenv-myservice"
roleRef:
  kind: "ClusterRole"
  apiGroup: "rbac.authorization.k8s.io"
  name: "mycloud-mysolution-myenv-myservice-hazelcast"
subjects:
  - kind: "ServiceAccount"
    name: "xp-node-sa"
    namespace: "mycloud-mysolution-myenv-myservice"
---
apiVersion: "rbac.authorization.k8s.io/v1"
kind: "Role"
metadata:
  annotations:
    enonic.applyPriority: "30"
  name: "xp-node-role"
  namespace: "mycloud-mysolution-myenv-myservice"
  ownerReferences:
    - apiVersion: "enonic.cloud/v1"
      kind: "Xp7Deployment"
      blockOwnerDeletion: false
      controller: true
      name: "mycloud-mysolution-myenv-myservice"
rules:
  - apiGroups:
      - "*"
    resources:
      - "endpoints"
      - "pods"
      - "services"
    verbs:
      - "get"
      - "list"
---
apiVersion: "rbac.authorization.k8s.io/v1"
kind: "Role"
metadata:
  annotations:
    enonic.applyPriority: "30"
  name: "cloud-api-role"
  namespace: "mycloud-mysolution-myenv-myservice"
  ownerReferences:
    - apiVersion: "enonic.cloud/v1"
      kind: "Xp7Deployment"
      blockOwnerDeletion: false
      controller: true
      name: "mycloud-mysolution-myenv-myservice"
rules:
  - apiGroups:
      - "*"
    resources:
      - "secrets"
    verbs:
      - "get"
  - apiGroups:
      - "*"
    resources:
      - "configmaps"
    verbs:
      - "get"
      - "update"
---
apiVersion: "rbac.authorization.k8s.io/v1"
kind: "Role"
metadata:
  annotations:
    enonic.applyPriority: "30"
  name: "xp-events-role"
  namespace: "mycloud-mysolution-myenv-myservice"
  ownerReferences:
    - apiVersion: "enonic.cloud/v1"
      kind: "Xp7Deployment"
      blockOwnerDeletion: false
      controller: true
      name: "mycloud-mysolution-myenv-myservice"
rules:
  - apiGroups:
      - "*"
    resources:
      - "pods"
    verbs:
      - "patch"
---
apiVersion: "rbac.authorization.k8s.io/v1"
kind: "RoleBinding"
metadata:
  annotations:
    enonic.applyPriority: "40"
  name: "xp-node-role-bindings"
  namespace: "mycloud-mysolution-myenv-myservice"
  ownerReferences:
    - apiVersion: "enonic.cloud/v1"
      kind: "Xp7Deployment"
      blockOwnerDeletion: false
      controller: true
      name: "mycloud-mysolution-myenv-myservice"
roleRef:
  kind: "Role"
  apiGroup: "rbac.authorization.k8s.io"
  name: "xp-node-role"
subjects:
  - kind: "ServiceAccount"
    name: "xp-node-sa"
    namespace: "mycloud-mysolution-myenv-myservice"
---
apiVersion: "rbac.authorization.k8s.io/v1"
kind: "RoleBinding"
metadata:
  annotations:
    enonic.applyPriority: "40"
  name: "cloud-api-role-binding"
  namespace: "mycloud-mysolution-myenv-myservice"
  ownerReferences:
    - apiVersion: "enonic.cloud/v1"
      kind: "Xp7Deployment"
      blockOwnerDeletion: false
      controller: true
      name: "mycloud-mysolution-myenv-myservice"
roleRef:
  kind: "Role"
  apiGroup: "rbac.authorization.k8s.io"
  name: "cloud-api-role"
subjects:
  - kind: "ServiceAccount"
    name: "cloudApi"
    namespace: "ec-system"
---
apiVersion: "rbac.authorization.k8s.io/v1"
kind: "RoleBinding"
metadata:
  annotations:
    enonic.applyPriority: "40"
  name: "xp-events-role-bindings"
  namespace: "mycloud-mysolution-myenv-myservice"
  ownerReferences:
    - apiVersion: "enonic.cloud/v1"
      kind: "Xp7Deployment"
      blockOwnerDeletion: false
      controller: true
      name: "mycloud-mysolution-myenv-myservice"
roleRef:
  kind: "Role"
  apiGroup: "rbac.authorization.k8s.io"
  name: "xp-events-role"
subjects:
  - kind: "ServiceAccount"
    name: "xp-events-sa"
    namespace: "mycloud-mysolution-myenv-myservice"
---
apiVersion: "v1"
kind: "Service"
metadata:
  annotations:
    enonic.applyPriority: "100"
  labels:
    cloud: "mycloud"
    enonic.managed: "true"
    environment: "myenv"
    service: "myservice"
    solution: "mysolution"
  name: "cluster-discovery"
  namespace: "mycloud-mysolution-myenv-myservice"
  ownerReferences:
    - apiVersion: "enonic.cloud/v1"
      kind: "Xp7Deployment"
      blockOwnerDeletion: false
      controller: true
      name: "mycloud-mysolution-myenv-myservice"
spec:
  clusterIP: "None"
  ports:
    - name: "hazelcast"
      port: 5701
      protocol: "TCP"
      targetPort: 5701
    - name: "es"
      port: 9300
      protocol: "TCP"
      targetPort: 9300
  publishNotReadyAddresses: true
  selector:
    enonic.deployment: "mycloud-mysolution-myenv-myservice"
  sessionAffinity: "None"
  type: "ClusterIP"
---
apiVersion: "v1"
kind: "Service"
metadata:
  annotations:
    enonic.applyPriority: "100"
  labels:
    cloud: "mycloud"
    enonic.managed: "true"
    environment: "myenv"
    service: "myservice"
    solution: "mysolution"
  name: "all"
  namespace: "mycloud-mysolution-myenv-myservice"
  ownerReferences:
    - apiVersion: "enonic.cloud/v1"
      kind: "Xp7Deployment"
      blockOwnerDeletion: false
      controller: true
      name: "mycloud-mysolution-myenv-myservice"
spec:
  clusterIP: "None"
  ports:
    - name: "xp-metrics"
      port: 2609
      protocol: "TCP"
      targetPort: 2609
    - name: "xp-management"
      port: 4848
      protocol: "TCP"
      targetPort: 4848
    - name: "xp-main"
      port: 8080
      protocol: "TCP"
      targetPort: 8080
  selector:
    enonic.deployment: "mycloud-mysolution-myenv-myservice"
  sessionAffinity: "None"
  type: "ClusterIP"
---
apiVersion: "v1"
kind: "Service"
metadata:
  annotations:
    enonic.applyPriority: "100"
  labels:
    cloud: "mycloud"
    enonic.managed: "true"
    enonic.nodeGroup: "master"
    environment: "myenv"
    service: "myservice"
    solution: "mysolution"
  name: "master"
  namespace: "mycloud-mysolution-myenv-myservice"
  ownerReferences:
    - apiVersion: "enonic.cloud/v1"
      kind: "Xp7Deployment"
      blockOwnerDeletion: false
      controller: true
      name: "mycloud-mysolution-myenv-myservice"
spec:
  clusterIP: "None"
  ports:
    - name: "xp-metrics"
      port: 2609
      protocol: "TCP"
      targetPort: 2609
    - name: "xp-management"
      port: 4848
      protocol: "TCP"
      targetPort: 4848
    - name: "xp-main"
      port: 8080
      protocol: "TCP"
      targetPort: 8080
  selector:
    enonic.deployment: "mycloud-mysolution-myenv-myservice"
    enonic.nodeGroup: "master"
  sessionAffinity: "None"
  type: "ClusterIP"
---
apiVersion: "v1"
kind: "Service"
metadata:
  annotations:
    enonic.applyPriority: "100"
  labels:
    cloud: "mycloud"
    enonic.managed: "true"
    enonic.nodeGroup: "data"
    environment: "myenv"
    service: "myservice"
    solution: "mysolution"
  name: "data"
  namespace: "mycloud-mysolution-myenv-myservice"
  ownerReferences:
    - apiVersion: "enonic.cloud/v1"
      kind: "Xp7Deployment"
      blockOwnerDeletion: false
      controller: true
      name: "mycloud-mysolution-myenv-myservice"
spec:
  clusterIP: "None"
  ports:
    - name: "xp-metrics"
      port: 2609
      protocol: "TCP"
      targetPort: 2609
    - name: "xp-management"
      port: 4848
      protocol: "TCP"
      targetPort: 4848
    - name: "xp-main"
      port: 8080
      protocol: "TCP"
      targetPort: 8080
  selector:
    enonic.deployment: "mycloud-mysolution-myenv-myservice"
    enonic.nodeGroup: "data"
  sessionAffinity: "None"
  type: "ClusterIP"
---
apiVersion: "v1"
kind: "Service"
metadata:
  annotations:
    enonic.applyPriority: "100"
  labels:
    cloud: "mycloud"
    enonic.managed: "true"
    enonic.nodeGroup: "frontend"
    environment: "myenv"
    service: "myservice"
    solution: "mysolution"
  name: "frontend"
  namespace: "mycloud-mysolution-myenv-myservice"
  ownerReferences:
    - apiVersion: "enonic.cloud/v1"
      kind: "Xp7Deployment"
      blockOwnerDeletion: false
      controller: true
      name: "mycloud-mysolution-myenv-myservice"
spec:
  clusterIP: "None"
  ports:
    - name: "xp-metrics"
      port: 2609
      protocol: "TCP"
      targetPort: 2609
    - name: "xp-management"
      port: 4848
      protocol: "TCP"
      targetPort: 4848
    - name: "xp-main"
      port: 8080
      protocol: "TCP"
      targetPort: 8080
  selector:
    enonic.deployment: "mycloud-mysolution-myenv-myservice"
    enonic.nodeGroup: "frontend"
  sessionAffinity: "None"
  type: "ClusterIP"
---
apiVersion: "apps/v1"
kind: "StatefulSet"
metadata:
  annotations:
    enonic.applyPriority: "90"
  labels:
    cloud: "mycloud"
    enonic.managed: "true"
    enonic.nodeGroup: "master"
    environment: "myenv"
    service: "myservice"
    solution: "mysolution"
  name: "master"
  namespace: "mycloud-mysolution-myenv-myservice"
  ownerReferences:
    - apiVersion: "enonic.cloud/v1"
      kind: "Xp7Deployment"
      blockOwnerDeletion: false
      controller: true
      name: "mycloud-mysolution-myenv-myservice"
spec:
  podManagementPolicy: "Parallel"
  replicas: 3
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      cloud: "mycloud"
      enonic.deployment: "mycloud-mysolution-myenv-myservice"
      enonic.managed: "true"
      enonic.nodeGroup: "master"
      environment: "myenv"
      service: "myservice"
      solution: "mysolution"
  serviceName: "cluster-discovery"
  template:
    metadata:
      annotations:
        enonic.cloud/logs.xp7: "true"
        enonic.cloud/metrics.xp7: "true"
      labels:
        cloud: "mycloud"
        enonic.data: "false"
        enonic.deployment: "mycloud-mysolution-myenv-myservice"
        enonic.managed: "true"
        enonic.master: "true"
        enonic.nodeGroup: "master"
        environment: "myenv"
        service: "myservice"
        solution: "mysolution"
    spec:
      containers:
        - env:
            - name: "NAMESPACE"
              valueFrom:
                fieldRef:
                  apiVersion: "v1"
                  fieldPath: "metadata.namespace"
            - name: "XP_NODE_NAME"
              valueFrom:
                fieldRef:
                  apiVersion: "v1"
                  fieldPath: "metadata.name"
            - name: "XP_NODE_GROUP"
              value: "master"
            - name: "XP_CLUSTERED"
              value: "true"
            - name: "XP_HZ_MIN_SIZE"
              value: "5"
            - name: "XP_ES_MIN_MASTERS"
              value: "2"
            - name: "XP_ES_MIN_DATAS"
              value: "2"
            - name: "XP_IS_MASTER"
              value: "true"
            - name: "XP_IS_DATA"
              value: "false"
            - name: "XP_NODE_IP"
              valueFrom:
                fieldRef:
                  apiVersion: "v1"
                  fieldPath: "status.podIP"
            - name: "SU_PASS_HASH"
              valueFrom:
                secretKeyRef:
                  key: "passHash"
                  name: "su"
                  optional: false
            - name: "XP_OPTS"
              value: "-Xms512m -Xmx512m -XX:-HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=/enonic-xp/home/data/oom.hprof\
            \ -Dhazelcast.shutdownhook.policy=GRACEFUL -Dhazelcast.graceful.shutdown.max.wait=600"
          image: "enonic/xp:7.13.2-ubuntu"
          imagePullPolicy: "IfNotPresent"
          lifecycle:
            preStop:
              exec:
                command:
                  - "/bin/bash"
                  - "/enonic-xp/home/extra-config/preStop.sh"
          livenessProbe:
            failureThreshold: 10
            httpGet:
              path: "/health"
              port: 2609
              scheme: "HTTP"
            timeoutSeconds: 2
          name: "exp"
          ports:
            - containerPort: 2609
              name: "xp-stats"
              protocol: "TCP"
            - containerPort: 8080
              name: "xp-main"
              protocol: "TCP"
            - containerPort: 9300
              name: "es-transport"
              protocol: "TCP"
          readinessProbe:
            failureThreshold: 2
            httpGet:
              path: "/ready"
              port: 2609
              scheme: "HTTP"
            timeoutSeconds: 2
          resources:
            limits:
              cpu: "1"
              memory: "1Gi"
            requests:
              cpu: "1"
              memory: "1Gi"
          securityContext:
            capabilities:
              drop:
                - "ALL"
            runAsNonRoot: true
            runAsUser: 1337
          startupProbe:
            failureThreshold: 20
            httpGet:
              path: "/health"
              port: 2609
              scheme: "HTTP"
            initialDelaySeconds: 10
            periodSeconds: 5
            timeoutSeconds: 2
          terminationMessagePath: "/dev/termination-log"
          terminationMessagePolicy: "File"
          volumeMounts:
            - mountPath: "/enonic-xp/home/config"
              name: "config"
            - mountPath: "/enonic-xp/home/extra-config"
              name: "extra-config"
            - mountPath: "/enonic-xp/home/repo/blob"
              name: "shared"
              subPath: "blobstore"
            - mountPath: "/enonic-xp/home/snapshots"
              name: "shared"
              subPath: "snapshots"
            - mountPath: "/enonic-xp/home/data"
              name: "export"
        - args:
            - "/enonic-xp/home/extra-config/pod-annotator.sh"
          command:
            - "sh"
          env:
            - name: "NAMESPACE"
              valueFrom:
                fieldRef:
                  apiVersion: "v1"
                  fieldPath: "metadata.namespace"
            - name: "POD_UID"
              valueFrom:
                fieldRef:
                  apiVersion: "v1"
                  fieldPath: "metadata.uid"
            - name: "XP_NODE_NAME"
              valueFrom:
                fieldRef:
                  apiVersion: "v1"
                  fieldPath: "metadata.name"
            - name: "XP_NODE_GROUP"
              value: "master"
            - name: "K8S_TOKEN"
              valueFrom:
                secretKeyRef:
                  key: "token"
                  name: "xp-events-sa-secret"
            - name: "XP_CONFIG_PATH"
              value: "/enonic-xp/home/config"
            - name: "POD_CONFIG_RELOADED_ANNOTATION"
              value: "enonic.cloud/configReloaded"
          image: "alpine/curl"
          imagePullPolicy: "IfNotPresent"
          name: "events"
          securityContext:
            capabilities:
              drop:
                - "ALL"
            runAsNonRoot: true
            runAsUser: 1337
          terminationMessagePath: "/dev/termination-log"
          terminationMessagePolicy: "File"
          volumeMounts:
            - mountPath: "/enonic-xp/home/config"
              name: "config"
            - mountPath: "/enonic-xp/home/extra-config"
              name: "extra-config"
      dnsPolicy: "ClusterFirst"
      initContainers:
        - command:
            - "sysctl"
            - "-w"
            - "vm.max_map_count=262144"
          image: "busybox"
          imagePullPolicy: "IfNotPresent"
          name: "configure-sysctl"
          resources: {}
          securityContext:
            privileged: true
            runAsUser: 0
          terminationMessagePath: "/dev/termination-log"
          terminationMessagePolicy: "File"
        - command:
            - "sh"
            - "-c"
            - "until nslookup ${XP_NODE_NAME}.cluster-discovery.${NAMESPACE}.svc.cluster.local;\
          \ do echo waiting for ${XP_NODE_NAME}; sleep 2; done"
          env:
            - name: "NAMESPACE"
              valueFrom:
                fieldRef:
                  apiVersion: "v1"
                  fieldPath: "metadata.namespace"
            - name: "XP_NODE_NAME"
              valueFrom:
                fieldRef:
                  apiVersion: "v1"
                  fieldPath: "metadata.name"
          image: "busybox"
          imagePullPolicy: "IfNotPresent"
          name: "wait-for-dns-discovery"
      restartPolicy: "Always"
      schedulerName: "default-scheduler"
      securityContext:
        fsGroup: 0
      serviceAccount: "xp-node-sa"
      serviceAccountName: "xp-node-sa"
      terminationGracePeriodSeconds: 600
      volumes:
        - configMap:
            defaultMode: 420
            name: "master"
          name: "config"
        - configMap:
            defaultMode: 420
            name: "extra-config"
          name: "extra-config"
        - name: "shared"
          persistentVolumeClaim:
            claimName: "shared"
        - name: "export"
          persistentVolumeClaim:
            claimName: "export"
  updateStrategy:
    type: "RollingUpdate"
---
apiVersion: "apps/v1"
kind: "StatefulSet"
metadata:
  annotations:
    enonic.applyPriority: "90"
  labels:
    cloud: "mycloud"
    enonic.managed: "true"
    enonic.nodeGroup: "data"
    environment: "myenv"
    service: "myservice"
    solution: "mysolution"
  name: "data"
  namespace: "mycloud-mysolution-myenv-myservice"
  ownerReferences:
    - apiVersion: "enonic.cloud/v1"
      kind: "Xp7Deployment"
      blockOwnerDeletion: false
      controller: true
      name: "mycloud-mysolution-myenv-myservice"
spec:
  podManagementPolicy: "Parallel"
  replicas: 2
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      cloud: "mycloud"
      enonic.deployment: "mycloud-mysolution-myenv-myservice"
      enonic.managed: "true"
      enonic.nodeGroup: "data"
      environment: "myenv"
      service: "myservice"
      solution: "mysolution"
  serviceName: "cluster-discovery"
  template:
    metadata:
      annotations:
        enonic.cloud/logs.xp7: "true"
        enonic.cloud/metrics.xp7: "true"
      labels:
        cloud: "mycloud"
        enonic.data: "true"
        enonic.deployment: "mycloud-mysolution-myenv-myservice"
        enonic.managed: "true"
        enonic.master: "false"
        enonic.nodeGroup: "data"
        environment: "myenv"
        service: "myservice"
        solution: "mysolution"
    spec:
      containers:
        - env:
            - name: "NAMESPACE"
              valueFrom:
                fieldRef:
                  apiVersion: "v1"
                  fieldPath: "metadata.namespace"
            - name: "XP_NODE_NAME"
              valueFrom:
                fieldRef:
                  apiVersion: "v1"
                  fieldPath: "metadata.name"
            - name: "XP_NODE_GROUP"
              value: "data"
            - name: "XP_CLUSTERED"
              value: "true"
            - name: "XP_HZ_MIN_SIZE"
              value: "5"
            - name: "XP_ES_MIN_MASTERS"
              value: "2"
            - name: "XP_ES_MIN_DATAS"
              value: "2"
            - name: "XP_IS_MASTER"
              value: "false"
            - name: "XP_IS_DATA"
              value: "true"
            - name: "XP_NODE_IP"
              valueFrom:
                fieldRef:
                  apiVersion: "v1"
                  fieldPath: "status.podIP"
            - name: "SU_PASS_HASH"
              valueFrom:
                secretKeyRef:
                  key: "passHash"
                  name: "su"
                  optional: false
            - name: "XP_OPTS"
              value: "-Xms614m -Xmx614m -XX:-HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=/enonic-xp/home/data/oom.hprof\
            \ -Dhazelcast.shutdownhook.policy=GRACEFUL -Dhazelcast.graceful.shutdown.max.wait=600"
          image: "enonic/xp:7.13.2-ubuntu"
          imagePullPolicy: "IfNotPresent"
          lifecycle:
            preStop:
              exec:
                command:
                  - "/bin/bash"
                  - "/enonic-xp/home/extra-config/preStop.sh"
          livenessProbe:
            failureThreshold: 10
            httpGet:
              path: "/health"
              port: 2609
              scheme: "HTTP"
            timeoutSeconds: 2
          name: "exp"
          ports:
            - containerPort: 2609
              name: "xp-stats"
              protocol: "TCP"
            - containerPort: 8080
              name: "xp-main"
              protocol: "TCP"
            - containerPort: 9300
              name: "es-transport"
              protocol: "TCP"
          readinessProbe:
            failureThreshold: 2
            httpGet:
              path: "/ready"
              port: 2609
              scheme: "HTTP"
            timeoutSeconds: 2
          resources:
            limits:
              cpu: "2"
              memory: "2Gi"
            requests:
              cpu: "2"
              memory: "2Gi"
          securityContext:
            capabilities:
              drop:
                - "ALL"
            runAsNonRoot: true
            runAsUser: 1337
          startupProbe:
            failureThreshold: 20
            httpGet:
              path: "/health"
              port: 2609
              scheme: "HTTP"
            initialDelaySeconds: 10
            periodSeconds: 5
            timeoutSeconds: 2
          terminationMessagePath: "/dev/termination-log"
          terminationMessagePolicy: "File"
          volumeMounts:
            - mountPath: "/enonic-xp/home/config"
              name: "config"
            - mountPath: "/enonic-xp/home/extra-config"
              name: "extra-config"
            - mountPath: "/enonic-xp/home/repo/index"
              name: "inner"
              subPath: "index"
            - mountPath: "/enonic-xp/home/work"
              name: "inner"
              subPath: "work"
            - mountPath: "/enonic-xp/home/deploy"
              name: "deploy"
            - mountPath: "/enonic-xp/home/repo/blob"
              name: "shared"
              subPath: "blobstore"
            - mountPath: "/enonic-xp/home/snapshots"
              name: "shared"
              subPath: "snapshots"
            - mountPath: "/enonic-xp/home/data"
              name: "export"
        - args:
            - "/enonic-xp/home/extra-config/pod-annotator.sh"
          command:
            - "sh"
          env:
            - name: "NAMESPACE"
              valueFrom:
                fieldRef:
                  apiVersion: "v1"
                  fieldPath: "metadata.namespace"
            - name: "POD_UID"
              valueFrom:
                fieldRef:
                  apiVersion: "v1"
                  fieldPath: "metadata.uid"
            - name: "XP_NODE_NAME"
              valueFrom:
                fieldRef:
                  apiVersion: "v1"
                  fieldPath: "metadata.name"
            - name: "XP_NODE_GROUP"
              value: "data"
            - name: "K8S_TOKEN"
              valueFrom:
                secretKeyRef:
                  key: "token"
                  name: "xp-events-sa-secret"
            - name: "XP_CONFIG_PATH"
              value: "/enonic-xp/home/config"
            - name: "POD_CONFIG_RELOADED_ANNOTATION"
              value: "enonic.cloud/configReloaded"
          image: "alpine/curl"
          imagePullPolicy: "IfNotPresent"
          name: "events"
          securityContext:
            capabilities:
              drop:
                - "ALL"
            runAsNonRoot: true
            runAsUser: 1337
          terminationMessagePath: "/dev/termination-log"
          terminationMessagePolicy: "File"
          volumeMounts:
            - mountPath: "/enonic-xp/home/config"
              name: "config"
            - mountPath: "/enonic-xp/home/extra-config"
              name: "extra-config"
      dnsPolicy: "ClusterFirst"
      initContainers:
        - command:
            - "sysctl"
            - "-w"
            - "vm.max_map_count=262144"
          image: "busybox"
          imagePullPolicy: "IfNotPresent"
          name: "configure-sysctl"
          resources: {}
          securityContext:
            privileged: true
            runAsUser: 0
          terminationMessagePath: "/dev/termination-log"
          terminationMessagePolicy: "File"
        - command:
            - "sh"
            - "-c"
            - "until nslookup ${XP_NODE_NAME}.cluster-discovery.${NAMESPACE}.svc.cluster.local;\
          \ do echo waiting for ${XP_NODE_NAME}; sleep 2; done"
          env:
            - name: "NAMESPACE"
              valueFrom:
                fieldRef:
                  apiVersion: "v1"
                  fieldPath: "metadata.namespace"
            - name: "XP_NODE_NAME"
              valueFrom:
                fieldRef:
                  apiVersion: "v1"
                  fieldPath: "metadata.name"
          image: "busybox"
          imagePullPolicy: "IfNotPresent"
          name: "wait-for-dns-discovery"
      restartPolicy: "Always"
      schedulerName: "default-scheduler"
      securityContext:
        fsGroup: 0
      serviceAccount: "xp-node-sa"
      serviceAccountName: "xp-node-sa"
      terminationGracePeriodSeconds: 600
      volumes:
        - configMap:
            defaultMode: 420
            name: "data"
          name: "config"
        - configMap:
            defaultMode: 420
            name: "extra-config"
          name: "extra-config"
        - name: "shared"
          persistentVolumeClaim:
            claimName: "shared"
        - name: "export"
          persistentVolumeClaim:
            claimName: "export"
  updateStrategy:
    type: "RollingUpdate"
  volumeClaimTemplates:
    - apiVersion: "v1"
      kind: "PersistentVolumeClaim"
      metadata:
        labels:
          cloud: "mycloud"
          enonic.managed: "true"
          enonic.nodeGroup: "data"
          environment: "myenv"
          service: "myservice"
          solution: "mysolution"
        name: "inner"
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "1Gi"
        storageClassName: "innerClass"
        volumeMode: "Filesystem"
    - apiVersion: "v1"
      kind: "PersistentVolumeClaim"
      metadata:
        labels:
          cloud: "mycloud"
          enonic.managed: "true"
          enonic.nodeGroup: "data"
          environment: "myenv"
          service: "myservice"
          solution: "mysolution"
        name: "deploy"
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "1Gi"
        storageClassName: "standard"
        volumeMode: "Filesystem"
---
apiVersion: "apps/v1"
kind: "StatefulSet"
metadata:
  annotations:
    enonic.applyPriority: "90"
  labels:
    cloud: "mycloud"
    enonic.managed: "true"
    enonic.nodeGroup: "frontend"
    environment: "myenv"
    service: "myservice"
    solution: "mysolution"
  name: "frontend"
  namespace: "mycloud-mysolution-myenv-myservice"
  ownerReferences:
    - apiVersion: "enonic.cloud/v1"
      kind: "Xp7Deployment"
      blockOwnerDeletion: false
      controller: true
      name: "mycloud-mysolution-myenv-myservice"
spec:
  podManagementPolicy: "Parallel"
  replicas: 3
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      cloud: "mycloud"
      enonic.deployment: "mycloud-mysolution-myenv-myservice"
      enonic.managed: "true"
      enonic.nodeGroup: "frontend"
      environment: "myenv"
      service: "myservice"
      solution: "mysolution"
  serviceName: "cluster-discovery"
  template:
    metadata:
      annotations:
        enonic.cloud/logs.xp7: "true"
        enonic.cloud/metrics.xp7: "true"
      labels:
        cloud: "mycloud"
        enonic.data: "false"
        enonic.deployment: "mycloud-mysolution-myenv-myservice"
        enonic.managed: "true"
        enonic.master: "false"
        enonic.nodeGroup: "frontend"
        environment: "myenv"
        service: "myservice"
        solution: "mysolution"
    spec:
      containers:
        - env:
            - name: "NAMESPACE"
              valueFrom:
                fieldRef:
                  apiVersion: "v1"
                  fieldPath: "metadata.namespace"
            - name: "XP_NODE_NAME"
              valueFrom:
                fieldRef:
                  apiVersion: "v1"
                  fieldPath: "metadata.name"
            - name: "XP_NODE_GROUP"
              value: "frontend"
            - name: "XP_CLUSTERED"
              value: "true"
            - name: "XP_HZ_MIN_SIZE"
              value: "5"
            - name: "XP_ES_MIN_MASTERS"
              value: "2"
            - name: "XP_ES_MIN_DATAS"
              value: "2"
            - name: "XP_IS_MASTER"
              value: "false"
            - name: "XP_IS_DATA"
              value: "false"
            - name: "XP_NODE_IP"
              valueFrom:
                fieldRef:
                  apiVersion: "v1"
                  fieldPath: "status.podIP"
            - name: "SU_PASS_HASH"
              valueFrom:
                secretKeyRef:
                  key: "passHash"
                  name: "su"
                  optional: false
            - name: "CUSTOM_ENV"
              value: "myenvvar"
            - name: "XP_OPTS"
              value: "-bla -Xms1536m -Xmx1536m -XX:-HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=/enonic-xp/home/data/oom.hprof\
            \ -Dhazelcast.shutdownhook.policy=GRACEFUL -Dhazelcast.graceful.shutdown.max.wait=600"
          image: "enonic/xp:7.13.2-ubuntu"
          imagePullPolicy: "IfNotPresent"
          lifecycle:
            preStop:
              exec:
                command:
                  - "/bin/bash"
                  - "/enonic-xp/home/extra-config/preStop.sh"
          livenessProbe:
            failureThreshold: 10
            httpGet:
              path: "/health"
              port: 2609
              scheme: "HTTP"
            timeoutSeconds: 2
          name: "exp"
          ports:
            - containerPort: 2609
              name: "xp-stats"
              protocol: "TCP"
            - containerPort: 8080
              name: "xp-main"
              protocol: "TCP"
            - containerPort: 9300
              name: "es-transport"
              protocol: "TCP"
          readinessProbe:
            failureThreshold: 2
            httpGet:
              path: "/ready"
              port: 2609
              scheme: "HTTP"
            timeoutSeconds: 2
          resources:
            limits:
              cpu: "3"
              memory: "3Gi"
            requests:
              cpu: "3"
              memory: "3Gi"
          securityContext:
            capabilities:
              drop:
                - "ALL"
            runAsNonRoot: true
            runAsUser: 1337
          startupProbe:
            failureThreshold: 20
            httpGet:
              path: "/health"
              port: 2609
              scheme: "HTTP"
            initialDelaySeconds: 10
            periodSeconds: 5
            timeoutSeconds: 2
          terminationMessagePath: "/dev/termination-log"
          terminationMessagePolicy: "File"
          volumeMounts:
            - mountPath: "/enonic-xp/home/config"
              name: "config"
            - mountPath: "/enonic-xp/home/extra-config"
              name: "extra-config"
            - mountPath: "/enonic-xp/home/work"
              name: "work"
            - mountPath: "/enonic-xp/home/repo/blob"
              name: "shared"
              subPath: "blobstore"
            - mountPath: "/enonic-xp/home/snapshots"
              name: "shared"
              subPath: "snapshots"
            - mountPath: "/enonic-xp/home/data"
              name: "export"
        - args:
            - "/enonic-xp/home/extra-config/pod-annotator.sh"
          command:
            - "sh"
          env:
            - name: "NAMESPACE"
              valueFrom:
                fieldRef:
                  apiVersion: "v1"
                  fieldPath: "metadata.namespace"
            - name: "POD_UID"
              valueFrom:
                fieldRef:
                  apiVersion: "v1"
                  fieldPath: "metadata.uid"
            - name: "XP_NODE_NAME"
              valueFrom:
                fieldRef:
                  apiVersion: "v1"
                  fieldPath: "metadata.name"
            - name: "XP_NODE_GROUP"
              value: "frontend"
            - name: "K8S_TOKEN"
              valueFrom:
                secretKeyRef:
                  key: "token"
                  name: "xp-events-sa-secret"
            - name: "XP_CONFIG_PATH"
              value: "/enonic-xp/home/config"
            - name: "POD_CONFIG_RELOADED_ANNOTATION"
              value: "enonic.cloud/configReloaded"
          image: "alpine/curl"
          imagePullPolicy: "IfNotPresent"
          name: "events"
          securityContext:
            capabilities:
              drop:
                - "ALL"
            runAsNonRoot: true
            runAsUser: 1337
          terminationMessagePath: "/dev/termination-log"
          terminationMessagePolicy: "File"
          volumeMounts:
            - mountPath: "/enonic-xp/home/config"
              name: "config"
            - mountPath: "/enonic-xp/home/extra-config"
              name: "extra-config"
      dnsPolicy: "ClusterFirst"
      initContainers:
        - command:
            - "sysctl"
            - "-w"
            - "vm.max_map_count=262144"
          image: "busybox"
          imagePullPolicy: "IfNotPresent"
          name: "configure-sysctl"
          resources: {}
          securityContext:
            privileged: true
            runAsUser: 0
          terminationMessagePath: "/dev/termination-log"
          terminationMessagePolicy: "File"
        - command:
            - "sh"
            - "-c"
            - "until nslookup ${XP_NODE_NAME}.cluster-discovery.${NAMESPACE}.svc.cluster.local;\
          \ do echo waiting for ${XP_NODE_NAME}; sleep 2; done"
          env:
            - name: "NAMESPACE"
              valueFrom:
                fieldRef:
                  apiVersion: "v1"
                  fieldPath: "metadata.namespace"
            - name: "XP_NODE_NAME"
              valueFrom:
                fieldRef:
                  apiVersion: "v1"
                  fieldPath: "metadata.name"
          image: "busybox"
          imagePullPolicy: "IfNotPresent"
          name: "wait-for-dns-discovery"
      restartPolicy: "Always"
      schedulerName: "default-scheduler"
      securityContext:
        fsGroup: 0
      serviceAccount: "xp-node-sa"
      serviceAccountName: "xp-node-sa"
      terminationGracePeriodSeconds: 600
      volumes:
        - configMap:
            defaultMode: 420
            name: "frontend"
          name: "config"
        - configMap:
            defaultMode: 420
            name: "extra-config"
          name: "extra-config"
        - name: "shared"
          persistentVolumeClaim:
            claimName: "shared"
        - name: "export"
          persistentVolumeClaim:
            claimName: "export"
  updateStrategy:
    type: "RollingUpdate"
  volumeClaimTemplates:
    - apiVersion: "v1"
      kind: "PersistentVolumeClaim"
      metadata:
        labels:
          cloud: "mycloud"
          enonic.managed: "true"
          enonic.nodeGroup: "frontend"
          environment: "myenv"
          service: "myservice"
          solution: "mysolution"
        name: "work"
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "7Gi"
        storageClassName: "innerClass"
        volumeMode: "Filesystem"
---
apiVersion: "enonic.cloud/v1"
kind: "Xp7Config"
metadata:
  annotations:
    enonic.applyPriority: "70"
    enonic.neverOverwrite: "true"
  labels:
    cloud: "mycloud"
    enonic.managed: "true"
    environment: "myenv"
    service: "myservice"
    solution: "mysolution"
  name: "all-system"
  namespace: "mycloud-mysolution-myenv-myservice"
  ownerReferences:
    - apiVersion: "enonic.cloud/v1"
      kind: "Xp7Deployment"
      blockOwnerDeletion: false
      controller: true
      name: "mycloud-mysolution-myenv-myservice"
spec:
  nodeGroup: "all"
  file: "system.properties"
  data: "xp.name = mycloud-mysolution-myenv-myservice\nxp.suPassword = {sha512}${env.SU_PASS_HASH}\n\
    xp.init.adminUserCreation = false"
  dataBase64: false
---
apiVersion: "enonic.cloud/v1"
kind: "Xp7Config"
metadata:
  annotations:
    enonic.applyPriority: "70"
    enonic.neverOverwrite: "true"
  labels:
    cloud: "mycloud"
    enonic.managed: "true"
    environment: "myenv"
    service: "myservice"
    solution: "mysolution"
  name: "all-admin"
  namespace: "mycloud-mysolution-myenv-myservice"
  ownerReferences:
    - apiVersion: "enonic.cloud/v1"
      kind: "Xp7Deployment"
      blockOwnerDeletion: false
      controller: true
      name: "mycloud-mysolution-myenv-myservice"
spec:
  nodeGroup: "all"
  file: "com.enonic.xp.app.main.cfg"
  data: "tourDisabled = true"
  dataBase64: false
---
apiVersion: "enonic.cloud/v1"
kind: "Xp7Config"
metadata:
  annotations:
    enonic.applyPriority: "70"
  labels:
    cloud: "mycloud"
    enonic.managed: "true"
    environment: "myenv"
    service: "myservice"
    solution: "mysolution"
  name: "all-cluster"
  namespace: "mycloud-mysolution-myenv-myservice"
  ownerReferences:
    - apiVersion: "enonic.cloud/v1"
      kind: "Xp7Deployment"
      blockOwnerDeletion: false
      controller: true
      name: "mycloud-mysolution-myenv-myservice"
spec:
  nodeGroup: "all"
  file: "com.enonic.xp.cluster.cfg"
  data: "network.host=0.0.0.0\nnetwork.publish.host=${env.XP_NODE_IP}\nnode.name=${env.XP_NODE_NAME}\n\
    cluster.enabled=true"
  dataBase64: false
---
apiVersion: "enonic.cloud/v1"
kind: "Xp7Config"
metadata:
  annotations:
    enonic.applyPriority: "70"
  labels:
    cloud: "mycloud"
    enonic.managed: "true"
    environment: "myenv"
    service: "myservice"
    solution: "mysolution"
  name: "all-hazelcast"
  namespace: "mycloud-mysolution-myenv-myservice"
  ownerReferences:
    - apiVersion: "enonic.cloud/v1"
      kind: "Xp7Deployment"
      blockOwnerDeletion: false
      controller: true
      name: "mycloud-mysolution-myenv-myservice"
spec:
  nodeGroup: "all"
  file: "com.enonic.xp.hazelcast.cfg"
  data: "clusterConfigDefaults=false\nsystem.hazelcast.initial.min.cluster.size=${env.XP_HZ_MIN_SIZE}\n\
    network.join.tcpIp.enabled=false\nnetwork.join.kubernetes.enabled=true\nnetwork.join.kubernetes.serviceName=cluster-discovery\n\
    network.join.kubernetes.namespace=mycloud-mysolution-myenv-myservice\nnetwork.join.kubernetes.kubernetesApiRetries=10\n\
    network.join.kubernetes.resolveNotReadyAddresses=true\npartition.group.enabled=true\n\
    partition.group.groupType=NODE_AWARE"
  dataBase64: false
---
apiVersion: "enonic.cloud/v1"
kind: "Xp7Config"
metadata:
  annotations:
    enonic.applyPriority: "70"
    enonic.neverOverwrite: "true"
  labels:
    cloud: "mycloud"
    enonic.managed: "true"
    environment: "myenv"
    service: "myservice"
    solution: "mysolution"
  name: "all-logback"
  namespace: "mycloud-mysolution-myenv-myservice"
  ownerReferences:
    - apiVersion: "enonic.cloud/v1"
      kind: "Xp7Deployment"
      blockOwnerDeletion: false
      controller: true
      name: "mycloud-mysolution-myenv-myservice"
spec:
  nodeGroup: "all"
  file: "logback.xml"
  data: "<?xml version=\"1.0\"?>\n<configuration scan=\"true\" scanPeriod=\"60 seconds\"\
    >\n\n  <appender name=\"FILE\" class=\"ch.qos.logback.core.rolling.RollingFileAppender\"\
    >\n    <file>${xp.home}/logs/server.log</file>\n    <rollingPolicy class=\"ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy\"\
    >\n      <fileNamePattern>${xp.home}/logs/server.%d{yyyy-MM-dd}.%i.log</fileNamePattern>\n\
    \      <maxFileSize>100MB</maxFileSize>\n      <maxHistory>7</maxHistory>\n  \
    \    <totalSizeCap>3GB</totalSizeCap>\n    </rollingPolicy>\n    <encoder>\n \
    \     <pattern>%date{ISO8601} %-5level %logger{36} - %msg%n</pattern>\n    </encoder>\n\
    \  </appender>\n\n  <appender name=\"STDOUT\" class=\"ch.qos.logback.core.ConsoleAppender\"\
    >\n    <withJansi>true</withJansi>\n    <encoder>\n      <pattern>%date{ISO8601}\
    \ %-5level %logger{36} - %msg%n</pattern>\n    </encoder>\n  </appender>\n\n \
    \ <root level=\"info\">\n    <appender-ref ref=\"STDOUT\"/>\n    <appender-ref\
    \ ref=\"FILE\"/>\n  </root>\n\n  <logger name=\"Events.Service\" level=\"WARN\"\
    \ additivity=\"false\">\n    <appender-ref ref=\"STDOUT\"/>\n    <appender-ref\
    \ ref=\"FILE\"/>\n  </logger>\n\n  <logger name=\"Events.Bundle\" level=\"WARN\"\
    \ additivity=\"false\">\n    <appender-ref ref=\"STDOUT\"/>\n    <appender-ref\
    \ ref=\"FILE\"/>\n  </logger>\n\n</configuration>"
  dataBase64: false
---
apiVersion: "enonic.cloud/v1"
kind: "Xp7Config"
metadata:
  annotations:
    enonic.applyPriority: "71"
    enonic.neverOverwrite: "true"
  labels:
    cloud: "mycloud"
    enonic.managed: "true"
    environment: "myenv"
    service: "myservice"
    solution: "mysolution"
  name: "master-vhosts"
  namespace: "mycloud-mysolution-myenv-myservice"
  ownerReferences:
    - apiVersion: "enonic.cloud/v1"
      kind: "Xp7Deployment"
      blockOwnerDeletion: false
      controller: true
      name: "mycloud-mysolution-myenv-myservice"
spec:
  nodeGroup: "master"
  file: "com.enonic.xp.web.vhost.cfg"
  data: "enabled = true"
  dataBase64: false
---
apiVersion: "enonic.cloud/v1"
kind: "Xp7Config"
metadata:
  annotations:
    enonic.applyPriority: "71"
  labels:
    cloud: "mycloud"
    enonic.managed: "true"
    environment: "myenv"
    service: "myservice"
    solution: "mysolution"
  name: "master-elasticsearch"
  namespace: "mycloud-mysolution-myenv-myservice"
  ownerReferences:
    - apiVersion: "enonic.cloud/v1"
      kind: "Xp7Deployment"
      blockOwnerDeletion: false
      controller: true
      name: "mycloud-mysolution-myenv-myservice"
spec:
  nodeGroup: "master"
  file: "com.enonic.xp.elasticsearch.cfg"
  data: "http.enabled=true\ncluster.name=mycloud-mysolution-myenv-myservice\nnode.master=${env.XP_IS_MASTER}\n\
    node.data=${env.XP_IS_DATA}\ngateway.expected_master_nodes=${env.XP_ES_MIN_MASTERS}\n\
    gateway.expected_data_nodes=${env.XP_ES_MIN_DATAS}\ngateway.recover_after_time=5m\n\
    discovery.zen.minimum_master_nodes=${env.XP_ES_MIN_MASTERS}\ndiscovery.unicast.sockets=cluster-discovery.mycloud-mysolution-myenv-myservice.svc.cluster.local\n\
    network.tcp.keep_alive=true\nindex.auto_expand_replicas=1-all"
  dataBase64: false
---
apiVersion: "enonic.cloud/v1"
kind: "Xp7Config"
metadata:
  annotations:
    enonic.applyPriority: "71"
    enonic.neverOverwrite: "true"
  labels:
    cloud: "mycloud"
    enonic.managed: "true"
    environment: "myenv"
    service: "myservice"
    solution: "mysolution"
  name: "data-vhosts"
  namespace: "mycloud-mysolution-myenv-myservice"
  ownerReferences:
    - apiVersion: "enonic.cloud/v1"
      kind: "Xp7Deployment"
      blockOwnerDeletion: false
      controller: true
      name: "mycloud-mysolution-myenv-myservice"
spec:
  nodeGroup: "data"
  file: "com.enonic.xp.web.vhost.cfg"
  data: "enabled = true"
  dataBase64: false
---
apiVersion: "enonic.cloud/v1"
kind: "Xp7Config"
metadata:
  annotations:
    enonic.applyPriority: "71"
  labels:
    cloud: "mycloud"
    enonic.managed: "true"
    environment: "myenv"
    service: "myservice"
    solution: "mysolution"
  name: "data-elasticsearch"
  namespace: "mycloud-mysolution-myenv-myservice"
  ownerReferences:
    - apiVersion: "enonic.cloud/v1"
      kind: "Xp7Deployment"
      blockOwnerDeletion: false
      controller: true
      name: "mycloud-mysolution-myenv-myservice"
spec:
  nodeGroup: "data"
  file: "com.enonic.xp.elasticsearch.cfg"
  data: "http.enabled=true\ncluster.name=mycloud-mysolution-myenv-myservice\nnode.master=${env.XP_IS_MASTER}\n\
    node.data=${env.XP_IS_DATA}\ngateway.expected_master_nodes=${env.XP_ES_MIN_MASTERS}\n\
    gateway.expected_data_nodes=${env.XP_ES_MIN_DATAS}\ngateway.recover_after_time=5m\n\
    discovery.zen.minimum_master_nodes=${env.XP_ES_MIN_MASTERS}\ndiscovery.unicast.sockets=cluster-discovery.mycloud-mysolution-myenv-myservice.svc.cluster.local\n\
    network.tcp.keep_alive=true\nindex.auto_expand_replicas=1-all"
  dataBase64: false
---
apiVersion: "enonic.cloud/v1"
kind: "Xp7Config"
metadata:
  annotations:
    enonic.applyPriority: "71"
    enonic.neverOverwrite: "true"
  labels:
    cloud: "mycloud"
    enonic.managed: "true"
    environment: "myenv"
    service: "myservice"
    solution: "mysolution"
  name: "frontend-vhosts"
  namespace: "mycloud-mysolution-myenv-myservice"
  ownerReferences:
    - apiVersion: "enonic.cloud/v1"
      kind: "Xp7Deployment"
      blockOwnerDeletion: false
      controller: true
      name: "mycloud-mysolution-myenv-myservice"
spec:
  nodeGroup: "frontend"
  file: "com.enonic.xp.web.vhost.cfg"
  data: "enabled = true"
  dataBase64: false
---
apiVersion: "enonic.cloud/v1"
kind: "Xp7Config"
metadata:
  annotations:
    enonic.applyPriority: "71"
  labels:
    cloud: "mycloud"
    enonic.managed: "true"
    environment: "myenv"
    service: "myservice"
    solution: "mysolution"
  name: "frontend-elasticsearch"
  namespace: "mycloud-mysolution-myenv-myservice"
  ownerReferences:
    - apiVersion: "enonic.cloud/v1"
      kind: "Xp7Deployment"
      blockOwnerDeletion: false
      controller: true
      name: "mycloud-mysolution-myenv-myservice"
spec:
  nodeGroup: "frontend"
  file: "com.enonic.xp.elasticsearch.cfg"
  data: "http.enabled=true\ncluster.name=mycloud-mysolution-myenv-myservice\nnode.master=${env.XP_IS_MASTER}\n\
    node.data=${env.XP_IS_DATA}\ngateway.expected_master_nodes=${env.XP_ES_MIN_MASTERS}\n\
    gateway.expected_data_nodes=${env.XP_ES_MIN_DATAS}\ngateway.recover_after_time=5m\n\
    discovery.zen.minimum_master_nodes=${env.XP_ES_MIN_MASTERS}\ndiscovery.unicast.sockets=cluster-discovery.mycloud-mysolution-myenv-myservice.svc.cluster.local\n\
    network.tcp.keep_alive=true\nindex.auto_expand_replicas=1-all"
  dataBase64: false
